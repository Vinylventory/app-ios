# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateAlbum {
  _count: AlbumCountAggregate
  _max: AlbumMaxAggregate
  _min: AlbumMinAggregate
}

type AggregateArtist {
  _count: ArtistCountAggregate
  _max: ArtistMaxAggregate
  _min: ArtistMinAggregate
}

type AggregateAuthored {
  _count: AuthoredCountAggregate
  _max: AuthoredMaxAggregate
  _min: AuthoredMinAggregate
}

type AggregateBought {
  _avg: BoughtAvgAggregate
  _count: BoughtCountAggregate
  _max: BoughtMaxAggregate
  _min: BoughtMinAggregate
  _sum: BoughtSumAggregate
}

type AggregateCredit {
  _count: CreditCountAggregate
  _max: CreditMaxAggregate
  _min: CreditMinAggregate
}

type AggregateImage {
  _count: ImageCountAggregate
  _max: ImageMaxAggregate
  _min: ImageMinAggregate
}

type AggregateLabel {
  _count: LabelCountAggregate
  _max: LabelMaxAggregate
  _min: LabelMinAggregate
}

type AggregatePlayedBy {
  _count: PlayedByCountAggregate
  _max: PlayedByMaxAggregate
  _min: PlayedByMinAggregate
}

type AggregatePocketState {
  _count: PocketStateCountAggregate
  _max: PocketStateMaxAggregate
  _min: PocketStateMinAggregate
}

type AggregateReadSpeed {
  _count: ReadSpeedCountAggregate
  _max: ReadSpeedMaxAggregate
  _min: ReadSpeedMinAggregate
}

type AggregateState {
  _count: StateCountAggregate
  _max: StateMaxAggregate
  _min: StateMinAggregate
}

type AggregateTrack {
  _avg: TrackAvgAggregate
  _count: TrackCountAggregate
  _max: TrackMaxAggregate
  _min: TrackMinAggregate
  _sum: TrackSumAggregate
}

type AggregateVinyl {
  _avg: VinylAvgAggregate
  _count: VinylCountAggregate
  _max: VinylMaxAggregate
  _min: VinylMinAggregate
  _sum: VinylSumAggregate
}

type Album {
  _count: AlbumCount
  idAlbum: String!
  name: String!
  vinyls(cursor: VinylWhereUniqueInput, distinct: [VinylScalarFieldEnum!], orderBy: [VinylOrderByWithRelationInput!], skip: Int, take: Int, where: VinylWhereInput): [Vinyl!]!
}

type AlbumCount {
  vinyls(where: VinylWhereInput): Int!
}

type AlbumCountAggregate {
  _all: Int!
  idAlbum: Int!
  name: Int!
}

input AlbumCountOrderByAggregateInput {
  idAlbum: SortOrder
  name: SortOrder
}

input AlbumCreateInput {
  idAlbum: String
  name: String!
  vinyls: VinylCreateNestedManyWithoutAlbumInput
}

input AlbumCreateManyInput {
  idAlbum: String
  name: String!
}

input AlbumCreateNestedOneWithoutVinylsInput {
  connect: AlbumWhereUniqueInput
  connectOrCreate: AlbumCreateOrConnectWithoutVinylsInput
  create: AlbumCreateWithoutVinylsInput
}

input AlbumCreateOrConnectWithoutVinylsInput {
  create: AlbumCreateWithoutVinylsInput!
  where: AlbumWhereUniqueInput!
}

input AlbumCreateWithoutVinylsInput {
  idAlbum: String
  name: String!
}

type AlbumGroupBy {
  _count: AlbumCountAggregate
  _max: AlbumMaxAggregate
  _min: AlbumMinAggregate
  idAlbum: String!
  name: String!
}

type AlbumMaxAggregate {
  idAlbum: String
  name: String
}

input AlbumMaxOrderByAggregateInput {
  idAlbum: SortOrder
  name: SortOrder
}

type AlbumMinAggregate {
  idAlbum: String
  name: String
}

input AlbumMinOrderByAggregateInput {
  idAlbum: SortOrder
  name: SortOrder
}

input AlbumNullableRelationFilter {
  is: AlbumWhereInput
  isNot: AlbumWhereInput
}

input AlbumOrderByWithAggregationInput {
  _count: AlbumCountOrderByAggregateInput
  _max: AlbumMaxOrderByAggregateInput
  _min: AlbumMinOrderByAggregateInput
  idAlbum: SortOrder
  name: SortOrder
}

input AlbumOrderByWithRelationInput {
  idAlbum: SortOrder
  name: SortOrder
  vinyls: VinylOrderByRelationAggregateInput
}

enum AlbumScalarFieldEnum {
  idAlbum
  name
}

input AlbumScalarWhereWithAggregatesInput {
  AND: [AlbumScalarWhereWithAggregatesInput!]
  NOT: [AlbumScalarWhereWithAggregatesInput!]
  OR: [AlbumScalarWhereWithAggregatesInput!]
  idAlbum: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
}

input AlbumUpdateInput {
  idAlbum: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  vinyls: VinylUpdateManyWithoutAlbumNestedInput
}

input AlbumUpdateManyMutationInput {
  idAlbum: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input AlbumUpdateOneWithoutVinylsNestedInput {
  connect: AlbumWhereUniqueInput
  connectOrCreate: AlbumCreateOrConnectWithoutVinylsInput
  create: AlbumCreateWithoutVinylsInput
  delete: AlbumWhereInput
  disconnect: AlbumWhereInput
  update: AlbumUpdateToOneWithWhereWithoutVinylsInput
  upsert: AlbumUpsertWithoutVinylsInput
}

input AlbumUpdateToOneWithWhereWithoutVinylsInput {
  data: AlbumUpdateWithoutVinylsInput!
  where: AlbumWhereInput
}

input AlbumUpdateWithoutVinylsInput {
  idAlbum: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input AlbumUpsertWithoutVinylsInput {
  create: AlbumCreateWithoutVinylsInput!
  update: AlbumUpdateWithoutVinylsInput!
  where: AlbumWhereInput
}

input AlbumWhereInput {
  AND: [AlbumWhereInput!]
  NOT: [AlbumWhereInput!]
  OR: [AlbumWhereInput!]
  idAlbum: StringFilter
  name: StringFilter
  vinyls: VinylListRelationFilter
}

input AlbumWhereUniqueInput {
  AND: [AlbumWhereInput!]
  NOT: [AlbumWhereInput!]
  OR: [AlbumWhereInput!]
  idAlbum: String
  name: String
  vinyls: VinylListRelationFilter
}

type Artist {
  _count: ArtistCount
  authored(cursor: AuthoredWhereUniqueInput, distinct: [AuthoredScalarFieldEnum!], orderBy: [AuthoredOrderByWithRelationInput!], skip: Int, take: Int, where: AuthoredWhereInput): [Authored!]!
  credits(cursor: CreditWhereUniqueInput, distinct: [CreditScalarFieldEnum!], orderBy: [CreditOrderByWithRelationInput!], skip: Int, take: Int, where: CreditWhereInput): [Credit!]!
  idArtist: String!
  name: String!
  origin: String!
  playedBy(cursor: PlayedByWhereUniqueInput, distinct: [PlayedByScalarFieldEnum!], orderBy: [PlayedByOrderByWithRelationInput!], skip: Int, take: Int, where: PlayedByWhereInput): [PlayedBy!]!
  surname: String
}

type ArtistCount {
  authored(where: AuthoredWhereInput): Int!
  credits(where: CreditWhereInput): Int!
  playedBy(where: PlayedByWhereInput): Int!
}

type ArtistCountAggregate {
  _all: Int!
  idArtist: Int!
  name: Int!
  origin: Int!
  surname: Int!
}

input ArtistCountOrderByAggregateInput {
  idArtist: SortOrder
  name: SortOrder
  origin: SortOrder
  surname: SortOrder
}

input ArtistCreateInput {
  authored: AuthoredCreateNestedManyWithoutArtistInput
  credits: CreditCreateNestedManyWithoutArtistInput
  idArtist: String
  name: String!
  origin: String!
  playedBy: PlayedByCreateNestedManyWithoutArtistInput
  surname: String
}

input ArtistCreateManyInput {
  idArtist: String
  name: String!
  origin: String!
  surname: String
}

input ArtistCreateNestedOneWithoutAuthoredInput {
  connect: ArtistWhereUniqueInput
  connectOrCreate: ArtistCreateOrConnectWithoutAuthoredInput
  create: ArtistCreateWithoutAuthoredInput
}

input ArtistCreateNestedOneWithoutCreditsInput {
  connect: ArtistWhereUniqueInput
  connectOrCreate: ArtistCreateOrConnectWithoutCreditsInput
  create: ArtistCreateWithoutCreditsInput
}

input ArtistCreateNestedOneWithoutPlayedByInput {
  connect: ArtistWhereUniqueInput
  connectOrCreate: ArtistCreateOrConnectWithoutPlayedByInput
  create: ArtistCreateWithoutPlayedByInput
}

input ArtistCreateOrConnectWithoutAuthoredInput {
  create: ArtistCreateWithoutAuthoredInput!
  where: ArtistWhereUniqueInput!
}

input ArtistCreateOrConnectWithoutCreditsInput {
  create: ArtistCreateWithoutCreditsInput!
  where: ArtistWhereUniqueInput!
}

input ArtistCreateOrConnectWithoutPlayedByInput {
  create: ArtistCreateWithoutPlayedByInput!
  where: ArtistWhereUniqueInput!
}

input ArtistCreateWithoutAuthoredInput {
  credits: CreditCreateNestedManyWithoutArtistInput
  idArtist: String
  name: String!
  origin: String!
  playedBy: PlayedByCreateNestedManyWithoutArtistInput
  surname: String
}

input ArtistCreateWithoutCreditsInput {
  authored: AuthoredCreateNestedManyWithoutArtistInput
  idArtist: String
  name: String!
  origin: String!
  playedBy: PlayedByCreateNestedManyWithoutArtistInput
  surname: String
}

input ArtistCreateWithoutPlayedByInput {
  authored: AuthoredCreateNestedManyWithoutArtistInput
  credits: CreditCreateNestedManyWithoutArtistInput
  idArtist: String
  name: String!
  origin: String!
  surname: String
}

type ArtistGroupBy {
  _count: ArtistCountAggregate
  _max: ArtistMaxAggregate
  _min: ArtistMinAggregate
  idArtist: String!
  name: String!
  origin: String!
  surname: String
}

type ArtistMaxAggregate {
  idArtist: String
  name: String
  origin: String
  surname: String
}

input ArtistMaxOrderByAggregateInput {
  idArtist: SortOrder
  name: SortOrder
  origin: SortOrder
  surname: SortOrder
}

type ArtistMinAggregate {
  idArtist: String
  name: String
  origin: String
  surname: String
}

input ArtistMinOrderByAggregateInput {
  idArtist: SortOrder
  name: SortOrder
  origin: SortOrder
  surname: SortOrder
}

input ArtistOrderByWithAggregationInput {
  _count: ArtistCountOrderByAggregateInput
  _max: ArtistMaxOrderByAggregateInput
  _min: ArtistMinOrderByAggregateInput
  idArtist: SortOrder
  name: SortOrder
  origin: SortOrder
  surname: SortOrderInput
}

input ArtistOrderByWithRelationInput {
  authored: AuthoredOrderByRelationAggregateInput
  credits: CreditOrderByRelationAggregateInput
  idArtist: SortOrder
  name: SortOrder
  origin: SortOrder
  playedBy: PlayedByOrderByRelationAggregateInput
  surname: SortOrderInput
}

input ArtistRelationFilter {
  is: ArtistWhereInput
  isNot: ArtistWhereInput
}

enum ArtistScalarFieldEnum {
  idArtist
  name
  origin
  surname
}

input ArtistScalarWhereWithAggregatesInput {
  AND: [ArtistScalarWhereWithAggregatesInput!]
  NOT: [ArtistScalarWhereWithAggregatesInput!]
  OR: [ArtistScalarWhereWithAggregatesInput!]
  idArtist: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  origin: StringWithAggregatesFilter
  surname: StringNullableWithAggregatesFilter
}

input ArtistSurnameNameOriginCompoundUniqueInput {
  name: String!
  origin: String!
  surname: String!
}

input ArtistUpdateInput {
  authored: AuthoredUpdateManyWithoutArtistNestedInput
  credits: CreditUpdateManyWithoutArtistNestedInput
  idArtist: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  origin: StringFieldUpdateOperationsInput
  playedBy: PlayedByUpdateManyWithoutArtistNestedInput
  surname: NullableStringFieldUpdateOperationsInput
}

input ArtistUpdateManyMutationInput {
  idArtist: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  origin: StringFieldUpdateOperationsInput
  surname: NullableStringFieldUpdateOperationsInput
}

input ArtistUpdateOneRequiredWithoutAuthoredNestedInput {
  connect: ArtistWhereUniqueInput
  connectOrCreate: ArtistCreateOrConnectWithoutAuthoredInput
  create: ArtistCreateWithoutAuthoredInput
  update: ArtistUpdateToOneWithWhereWithoutAuthoredInput
  upsert: ArtistUpsertWithoutAuthoredInput
}

input ArtistUpdateOneRequiredWithoutCreditsNestedInput {
  connect: ArtistWhereUniqueInput
  connectOrCreate: ArtistCreateOrConnectWithoutCreditsInput
  create: ArtistCreateWithoutCreditsInput
  update: ArtistUpdateToOneWithWhereWithoutCreditsInput
  upsert: ArtistUpsertWithoutCreditsInput
}

input ArtistUpdateOneRequiredWithoutPlayedByNestedInput {
  connect: ArtistWhereUniqueInput
  connectOrCreate: ArtistCreateOrConnectWithoutPlayedByInput
  create: ArtistCreateWithoutPlayedByInput
  update: ArtistUpdateToOneWithWhereWithoutPlayedByInput
  upsert: ArtistUpsertWithoutPlayedByInput
}

input ArtistUpdateToOneWithWhereWithoutAuthoredInput {
  data: ArtistUpdateWithoutAuthoredInput!
  where: ArtistWhereInput
}

input ArtistUpdateToOneWithWhereWithoutCreditsInput {
  data: ArtistUpdateWithoutCreditsInput!
  where: ArtistWhereInput
}

input ArtistUpdateToOneWithWhereWithoutPlayedByInput {
  data: ArtistUpdateWithoutPlayedByInput!
  where: ArtistWhereInput
}

input ArtistUpdateWithoutAuthoredInput {
  credits: CreditUpdateManyWithoutArtistNestedInput
  idArtist: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  origin: StringFieldUpdateOperationsInput
  playedBy: PlayedByUpdateManyWithoutArtistNestedInput
  surname: NullableStringFieldUpdateOperationsInput
}

input ArtistUpdateWithoutCreditsInput {
  authored: AuthoredUpdateManyWithoutArtistNestedInput
  idArtist: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  origin: StringFieldUpdateOperationsInput
  playedBy: PlayedByUpdateManyWithoutArtistNestedInput
  surname: NullableStringFieldUpdateOperationsInput
}

input ArtistUpdateWithoutPlayedByInput {
  authored: AuthoredUpdateManyWithoutArtistNestedInput
  credits: CreditUpdateManyWithoutArtistNestedInput
  idArtist: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  origin: StringFieldUpdateOperationsInput
  surname: NullableStringFieldUpdateOperationsInput
}

input ArtistUpsertWithoutAuthoredInput {
  create: ArtistCreateWithoutAuthoredInput!
  update: ArtistUpdateWithoutAuthoredInput!
  where: ArtistWhereInput
}

input ArtistUpsertWithoutCreditsInput {
  create: ArtistCreateWithoutCreditsInput!
  update: ArtistUpdateWithoutCreditsInput!
  where: ArtistWhereInput
}

input ArtistUpsertWithoutPlayedByInput {
  create: ArtistCreateWithoutPlayedByInput!
  update: ArtistUpdateWithoutPlayedByInput!
  where: ArtistWhereInput
}

input ArtistWhereInput {
  AND: [ArtistWhereInput!]
  NOT: [ArtistWhereInput!]
  OR: [ArtistWhereInput!]
  authored: AuthoredListRelationFilter
  credits: CreditListRelationFilter
  idArtist: StringFilter
  name: StringFilter
  origin: StringFilter
  playedBy: PlayedByListRelationFilter
  surname: StringNullableFilter
}

input ArtistWhereUniqueInput {
  AND: [ArtistWhereInput!]
  NOT: [ArtistWhereInput!]
  OR: [ArtistWhereInput!]
  authored: AuthoredListRelationFilter
  credits: CreditListRelationFilter
  idArtist: String
  name: StringFilter
  origin: StringFilter
  playedBy: PlayedByListRelationFilter
  surname: StringNullableFilter
  surname_name_origin: ArtistSurnameNameOriginCompoundUniqueInput
}

type Authored {
  artist: Artist!
  idArtist: String!
  idAuthored: String!
  idVinyl: String!
  vinyl: Vinyl!
}

type AuthoredCountAggregate {
  _all: Int!
  idArtist: Int!
  idAuthored: Int!
  idVinyl: Int!
}

input AuthoredCountOrderByAggregateInput {
  idArtist: SortOrder
  idAuthored: SortOrder
  idVinyl: SortOrder
}

input AuthoredCreateInput {
  artist: ArtistCreateNestedOneWithoutAuthoredInput!
  idAuthored: String
  vinyl: VinylCreateNestedOneWithoutAuthoredInput!
}

input AuthoredCreateManyArtistInput {
  idAuthored: String
  idVinyl: String!
}

input AuthoredCreateManyArtistInputEnvelope {
  data: [AuthoredCreateManyArtistInput!]!
  skipDuplicates: Boolean
}

input AuthoredCreateManyInput {
  idArtist: String!
  idAuthored: String
  idVinyl: String!
}

input AuthoredCreateManyVinylInput {
  idArtist: String!
  idAuthored: String
}

input AuthoredCreateManyVinylInputEnvelope {
  data: [AuthoredCreateManyVinylInput!]!
  skipDuplicates: Boolean
}

input AuthoredCreateNestedManyWithoutArtistInput {
  connect: [AuthoredWhereUniqueInput!]
  connectOrCreate: [AuthoredCreateOrConnectWithoutArtistInput!]
  create: [AuthoredCreateWithoutArtistInput!]
  createMany: AuthoredCreateManyArtistInputEnvelope
}

input AuthoredCreateNestedManyWithoutVinylInput {
  connect: [AuthoredWhereUniqueInput!]
  connectOrCreate: [AuthoredCreateOrConnectWithoutVinylInput!]
  create: [AuthoredCreateWithoutVinylInput!]
  createMany: AuthoredCreateManyVinylInputEnvelope
}

input AuthoredCreateOrConnectWithoutArtistInput {
  create: AuthoredCreateWithoutArtistInput!
  where: AuthoredWhereUniqueInput!
}

input AuthoredCreateOrConnectWithoutVinylInput {
  create: AuthoredCreateWithoutVinylInput!
  where: AuthoredWhereUniqueInput!
}

input AuthoredCreateWithoutArtistInput {
  idAuthored: String
  vinyl: VinylCreateNestedOneWithoutAuthoredInput!
}

input AuthoredCreateWithoutVinylInput {
  artist: ArtistCreateNestedOneWithoutAuthoredInput!
  idAuthored: String
}

type AuthoredGroupBy {
  _count: AuthoredCountAggregate
  _max: AuthoredMaxAggregate
  _min: AuthoredMinAggregate
  idArtist: String!
  idAuthored: String!
  idVinyl: String!
}

input AuthoredIdArtistIdVinylCompoundUniqueInput {
  idArtist: String!
  idVinyl: String!
}

input AuthoredListRelationFilter {
  every: AuthoredWhereInput
  none: AuthoredWhereInput
  some: AuthoredWhereInput
}

type AuthoredMaxAggregate {
  idArtist: String
  idAuthored: String
  idVinyl: String
}

input AuthoredMaxOrderByAggregateInput {
  idArtist: SortOrder
  idAuthored: SortOrder
  idVinyl: SortOrder
}

type AuthoredMinAggregate {
  idArtist: String
  idAuthored: String
  idVinyl: String
}

input AuthoredMinOrderByAggregateInput {
  idArtist: SortOrder
  idAuthored: SortOrder
  idVinyl: SortOrder
}

input AuthoredOrderByRelationAggregateInput {
  _count: SortOrder
}

input AuthoredOrderByWithAggregationInput {
  _count: AuthoredCountOrderByAggregateInput
  _max: AuthoredMaxOrderByAggregateInput
  _min: AuthoredMinOrderByAggregateInput
  idArtist: SortOrder
  idAuthored: SortOrder
  idVinyl: SortOrder
}

input AuthoredOrderByWithRelationInput {
  artist: ArtistOrderByWithRelationInput
  idArtist: SortOrder
  idAuthored: SortOrder
  idVinyl: SortOrder
  vinyl: VinylOrderByWithRelationInput
}

enum AuthoredScalarFieldEnum {
  idArtist
  idAuthored
  idVinyl
}

input AuthoredScalarWhereInput {
  AND: [AuthoredScalarWhereInput!]
  NOT: [AuthoredScalarWhereInput!]
  OR: [AuthoredScalarWhereInput!]
  idArtist: StringFilter
  idAuthored: StringFilter
  idVinyl: StringFilter
}

input AuthoredScalarWhereWithAggregatesInput {
  AND: [AuthoredScalarWhereWithAggregatesInput!]
  NOT: [AuthoredScalarWhereWithAggregatesInput!]
  OR: [AuthoredScalarWhereWithAggregatesInput!]
  idArtist: StringWithAggregatesFilter
  idAuthored: StringWithAggregatesFilter
  idVinyl: StringWithAggregatesFilter
}

input AuthoredUpdateInput {
  artist: ArtistUpdateOneRequiredWithoutAuthoredNestedInput
  idAuthored: StringFieldUpdateOperationsInput
  vinyl: VinylUpdateOneRequiredWithoutAuthoredNestedInput
}

input AuthoredUpdateManyMutationInput {
  idAuthored: StringFieldUpdateOperationsInput
}

input AuthoredUpdateManyWithWhereWithoutArtistInput {
  data: AuthoredUpdateManyMutationInput!
  where: AuthoredScalarWhereInput!
}

input AuthoredUpdateManyWithWhereWithoutVinylInput {
  data: AuthoredUpdateManyMutationInput!
  where: AuthoredScalarWhereInput!
}

input AuthoredUpdateManyWithoutArtistNestedInput {
  connect: [AuthoredWhereUniqueInput!]
  connectOrCreate: [AuthoredCreateOrConnectWithoutArtistInput!]
  create: [AuthoredCreateWithoutArtistInput!]
  createMany: AuthoredCreateManyArtistInputEnvelope
  delete: [AuthoredWhereUniqueInput!]
  deleteMany: [AuthoredScalarWhereInput!]
  disconnect: [AuthoredWhereUniqueInput!]
  set: [AuthoredWhereUniqueInput!]
  update: [AuthoredUpdateWithWhereUniqueWithoutArtistInput!]
  updateMany: [AuthoredUpdateManyWithWhereWithoutArtistInput!]
  upsert: [AuthoredUpsertWithWhereUniqueWithoutArtistInput!]
}

input AuthoredUpdateManyWithoutVinylNestedInput {
  connect: [AuthoredWhereUniqueInput!]
  connectOrCreate: [AuthoredCreateOrConnectWithoutVinylInput!]
  create: [AuthoredCreateWithoutVinylInput!]
  createMany: AuthoredCreateManyVinylInputEnvelope
  delete: [AuthoredWhereUniqueInput!]
  deleteMany: [AuthoredScalarWhereInput!]
  disconnect: [AuthoredWhereUniqueInput!]
  set: [AuthoredWhereUniqueInput!]
  update: [AuthoredUpdateWithWhereUniqueWithoutVinylInput!]
  updateMany: [AuthoredUpdateManyWithWhereWithoutVinylInput!]
  upsert: [AuthoredUpsertWithWhereUniqueWithoutVinylInput!]
}

input AuthoredUpdateWithWhereUniqueWithoutArtistInput {
  data: AuthoredUpdateWithoutArtistInput!
  where: AuthoredWhereUniqueInput!
}

input AuthoredUpdateWithWhereUniqueWithoutVinylInput {
  data: AuthoredUpdateWithoutVinylInput!
  where: AuthoredWhereUniqueInput!
}

input AuthoredUpdateWithoutArtistInput {
  idAuthored: StringFieldUpdateOperationsInput
  vinyl: VinylUpdateOneRequiredWithoutAuthoredNestedInput
}

input AuthoredUpdateWithoutVinylInput {
  artist: ArtistUpdateOneRequiredWithoutAuthoredNestedInput
  idAuthored: StringFieldUpdateOperationsInput
}

input AuthoredUpsertWithWhereUniqueWithoutArtistInput {
  create: AuthoredCreateWithoutArtistInput!
  update: AuthoredUpdateWithoutArtistInput!
  where: AuthoredWhereUniqueInput!
}

input AuthoredUpsertWithWhereUniqueWithoutVinylInput {
  create: AuthoredCreateWithoutVinylInput!
  update: AuthoredUpdateWithoutVinylInput!
  where: AuthoredWhereUniqueInput!
}

input AuthoredWhereInput {
  AND: [AuthoredWhereInput!]
  NOT: [AuthoredWhereInput!]
  OR: [AuthoredWhereInput!]
  artist: ArtistRelationFilter
  idArtist: StringFilter
  idAuthored: StringFilter
  idVinyl: StringFilter
  vinyl: VinylRelationFilter
}

input AuthoredWhereUniqueInput {
  AND: [AuthoredWhereInput!]
  NOT: [AuthoredWhereInput!]
  OR: [AuthoredWhereInput!]
  artist: ArtistRelationFilter
  idArtist: StringFilter
  idArtist_idVinyl: AuthoredIdArtistIdVinylCompoundUniqueInput
  idAuthored: String
  idVinyl: StringFilter
  vinyl: VinylRelationFilter
}

type Bought {
  _count: BoughtCount
  date: DateTimeISO!
  idBought: String!
  loc: String!
  note: String
  price: Int
  vinyls(cursor: VinylWhereUniqueInput, distinct: [VinylScalarFieldEnum!], orderBy: [VinylOrderByWithRelationInput!], skip: Int, take: Int, where: VinylWhereInput): [Vinyl!]!
}

type BoughtAvgAggregate {
  price: Float
}

input BoughtAvgOrderByAggregateInput {
  price: SortOrder
}

type BoughtCount {
  vinyls(where: VinylWhereInput): Int!
}

type BoughtCountAggregate {
  _all: Int!
  date: Int!
  idBought: Int!
  loc: Int!
  note: Int!
  price: Int!
}

input BoughtCountOrderByAggregateInput {
  date: SortOrder
  idBought: SortOrder
  loc: SortOrder
  note: SortOrder
  price: SortOrder
}

input BoughtCreateInput {
  date: DateTimeISO!
  idBought: String
  loc: String!
  note: String
  price: Int
  vinyls: VinylCreateNestedManyWithoutBoughtInput
}

input BoughtCreateManyInput {
  date: DateTimeISO!
  idBought: String
  loc: String!
  note: String
  price: Int
}

input BoughtCreateNestedOneWithoutVinylsInput {
  connect: BoughtWhereUniqueInput
  connectOrCreate: BoughtCreateOrConnectWithoutVinylsInput
  create: BoughtCreateWithoutVinylsInput
}

input BoughtCreateOrConnectWithoutVinylsInput {
  create: BoughtCreateWithoutVinylsInput!
  where: BoughtWhereUniqueInput!
}

input BoughtCreateWithoutVinylsInput {
  date: DateTimeISO!
  idBought: String
  loc: String!
  note: String
  price: Int
}

type BoughtGroupBy {
  _avg: BoughtAvgAggregate
  _count: BoughtCountAggregate
  _max: BoughtMaxAggregate
  _min: BoughtMinAggregate
  _sum: BoughtSumAggregate
  date: DateTimeISO!
  idBought: String!
  loc: String!
  note: String
  price: Int
}

input BoughtLocDateCompoundUniqueInput {
  date: DateTimeISO!
  loc: String!
}

type BoughtMaxAggregate {
  date: DateTimeISO
  idBought: String
  loc: String
  note: String
  price: Int
}

input BoughtMaxOrderByAggregateInput {
  date: SortOrder
  idBought: SortOrder
  loc: SortOrder
  note: SortOrder
  price: SortOrder
}

type BoughtMinAggregate {
  date: DateTimeISO
  idBought: String
  loc: String
  note: String
  price: Int
}

input BoughtMinOrderByAggregateInput {
  date: SortOrder
  idBought: SortOrder
  loc: SortOrder
  note: SortOrder
  price: SortOrder
}

input BoughtNullableRelationFilter {
  is: BoughtWhereInput
  isNot: BoughtWhereInput
}

input BoughtOrderByWithAggregationInput {
  _avg: BoughtAvgOrderByAggregateInput
  _count: BoughtCountOrderByAggregateInput
  _max: BoughtMaxOrderByAggregateInput
  _min: BoughtMinOrderByAggregateInput
  _sum: BoughtSumOrderByAggregateInput
  date: SortOrder
  idBought: SortOrder
  loc: SortOrder
  note: SortOrderInput
  price: SortOrderInput
}

input BoughtOrderByWithRelationInput {
  date: SortOrder
  idBought: SortOrder
  loc: SortOrder
  note: SortOrderInput
  price: SortOrderInput
  vinyls: VinylOrderByRelationAggregateInput
}

enum BoughtScalarFieldEnum {
  date
  idBought
  loc
  note
  price
}

input BoughtScalarWhereWithAggregatesInput {
  AND: [BoughtScalarWhereWithAggregatesInput!]
  NOT: [BoughtScalarWhereWithAggregatesInput!]
  OR: [BoughtScalarWhereWithAggregatesInput!]
  date: DateTimeWithAggregatesFilter
  idBought: StringWithAggregatesFilter
  loc: StringWithAggregatesFilter
  note: StringNullableWithAggregatesFilter
  price: IntNullableWithAggregatesFilter
}

type BoughtSumAggregate {
  price: Int
}

input BoughtSumOrderByAggregateInput {
  price: SortOrder
}

input BoughtUpdateInput {
  date: DateTimeFieldUpdateOperationsInput
  idBought: StringFieldUpdateOperationsInput
  loc: StringFieldUpdateOperationsInput
  note: NullableStringFieldUpdateOperationsInput
  price: NullableIntFieldUpdateOperationsInput
  vinyls: VinylUpdateManyWithoutBoughtNestedInput
}

input BoughtUpdateManyMutationInput {
  date: DateTimeFieldUpdateOperationsInput
  idBought: StringFieldUpdateOperationsInput
  loc: StringFieldUpdateOperationsInput
  note: NullableStringFieldUpdateOperationsInput
  price: NullableIntFieldUpdateOperationsInput
}

input BoughtUpdateOneWithoutVinylsNestedInput {
  connect: BoughtWhereUniqueInput
  connectOrCreate: BoughtCreateOrConnectWithoutVinylsInput
  create: BoughtCreateWithoutVinylsInput
  delete: BoughtWhereInput
  disconnect: BoughtWhereInput
  update: BoughtUpdateToOneWithWhereWithoutVinylsInput
  upsert: BoughtUpsertWithoutVinylsInput
}

input BoughtUpdateToOneWithWhereWithoutVinylsInput {
  data: BoughtUpdateWithoutVinylsInput!
  where: BoughtWhereInput
}

input BoughtUpdateWithoutVinylsInput {
  date: DateTimeFieldUpdateOperationsInput
  idBought: StringFieldUpdateOperationsInput
  loc: StringFieldUpdateOperationsInput
  note: NullableStringFieldUpdateOperationsInput
  price: NullableIntFieldUpdateOperationsInput
}

input BoughtUpsertWithoutVinylsInput {
  create: BoughtCreateWithoutVinylsInput!
  update: BoughtUpdateWithoutVinylsInput!
  where: BoughtWhereInput
}

input BoughtWhereInput {
  AND: [BoughtWhereInput!]
  NOT: [BoughtWhereInput!]
  OR: [BoughtWhereInput!]
  date: DateTimeFilter
  idBought: StringFilter
  loc: StringFilter
  note: StringNullableFilter
  price: IntNullableFilter
  vinyls: VinylListRelationFilter
}

input BoughtWhereUniqueInput {
  AND: [BoughtWhereInput!]
  NOT: [BoughtWhereInput!]
  OR: [BoughtWhereInput!]
  date: DateTimeFilter
  idBought: String
  loc: StringFilter
  loc_date: BoughtLocDateCompoundUniqueInput
  note: StringNullableFilter
  price: IntNullableFilter
  vinyls: VinylListRelationFilter
}

type Credit {
  artist: Artist!
  idArtist: String!
  idCredit: String!
  idVinyl: String!
  note: String
  role: String
  vinyl: Vinyl!
}

type CreditCountAggregate {
  _all: Int!
  idArtist: Int!
  idCredit: Int!
  idVinyl: Int!
  note: Int!
  role: Int!
}

input CreditCountOrderByAggregateInput {
  idArtist: SortOrder
  idCredit: SortOrder
  idVinyl: SortOrder
  note: SortOrder
  role: SortOrder
}

input CreditCreateInput {
  artist: ArtistCreateNestedOneWithoutCreditsInput!
  idCredit: String
  note: String
  role: String
  vinyl: VinylCreateNestedOneWithoutCreditsInput!
}

input CreditCreateManyArtistInput {
  idCredit: String
  idVinyl: String!
  note: String
  role: String
}

input CreditCreateManyArtistInputEnvelope {
  data: [CreditCreateManyArtistInput!]!
  skipDuplicates: Boolean
}

input CreditCreateManyInput {
  idArtist: String!
  idCredit: String
  idVinyl: String!
  note: String
  role: String
}

input CreditCreateManyVinylInput {
  idArtist: String!
  idCredit: String
  note: String
  role: String
}

input CreditCreateManyVinylInputEnvelope {
  data: [CreditCreateManyVinylInput!]!
  skipDuplicates: Boolean
}

input CreditCreateNestedManyWithoutArtistInput {
  connect: [CreditWhereUniqueInput!]
  connectOrCreate: [CreditCreateOrConnectWithoutArtistInput!]
  create: [CreditCreateWithoutArtistInput!]
  createMany: CreditCreateManyArtistInputEnvelope
}

input CreditCreateNestedManyWithoutVinylInput {
  connect: [CreditWhereUniqueInput!]
  connectOrCreate: [CreditCreateOrConnectWithoutVinylInput!]
  create: [CreditCreateWithoutVinylInput!]
  createMany: CreditCreateManyVinylInputEnvelope
}

input CreditCreateOrConnectWithoutArtistInput {
  create: CreditCreateWithoutArtistInput!
  where: CreditWhereUniqueInput!
}

input CreditCreateOrConnectWithoutVinylInput {
  create: CreditCreateWithoutVinylInput!
  where: CreditWhereUniqueInput!
}

input CreditCreateWithoutArtistInput {
  idCredit: String
  note: String
  role: String
  vinyl: VinylCreateNestedOneWithoutCreditsInput!
}

input CreditCreateWithoutVinylInput {
  artist: ArtistCreateNestedOneWithoutCreditsInput!
  idCredit: String
  note: String
  role: String
}

type CreditGroupBy {
  _count: CreditCountAggregate
  _max: CreditMaxAggregate
  _min: CreditMinAggregate
  idArtist: String!
  idCredit: String!
  idVinyl: String!
  note: String
  role: String
}

input CreditListRelationFilter {
  every: CreditWhereInput
  none: CreditWhereInput
  some: CreditWhereInput
}

type CreditMaxAggregate {
  idArtist: String
  idCredit: String
  idVinyl: String
  note: String
  role: String
}

input CreditMaxOrderByAggregateInput {
  idArtist: SortOrder
  idCredit: SortOrder
  idVinyl: SortOrder
  note: SortOrder
  role: SortOrder
}

type CreditMinAggregate {
  idArtist: String
  idCredit: String
  idVinyl: String
  note: String
  role: String
}

input CreditMinOrderByAggregateInput {
  idArtist: SortOrder
  idCredit: SortOrder
  idVinyl: SortOrder
  note: SortOrder
  role: SortOrder
}

input CreditOrderByRelationAggregateInput {
  _count: SortOrder
}

input CreditOrderByWithAggregationInput {
  _count: CreditCountOrderByAggregateInput
  _max: CreditMaxOrderByAggregateInput
  _min: CreditMinOrderByAggregateInput
  idArtist: SortOrder
  idCredit: SortOrder
  idVinyl: SortOrder
  note: SortOrderInput
  role: SortOrderInput
}

input CreditOrderByWithRelationInput {
  artist: ArtistOrderByWithRelationInput
  idArtist: SortOrder
  idCredit: SortOrder
  idVinyl: SortOrder
  note: SortOrderInput
  role: SortOrderInput
  vinyl: VinylOrderByWithRelationInput
}

enum CreditScalarFieldEnum {
  idArtist
  idCredit
  idVinyl
  note
  role
}

input CreditScalarWhereInput {
  AND: [CreditScalarWhereInput!]
  NOT: [CreditScalarWhereInput!]
  OR: [CreditScalarWhereInput!]
  idArtist: StringFilter
  idCredit: StringFilter
  idVinyl: StringFilter
  note: StringNullableFilter
  role: StringNullableFilter
}

input CreditScalarWhereWithAggregatesInput {
  AND: [CreditScalarWhereWithAggregatesInput!]
  NOT: [CreditScalarWhereWithAggregatesInput!]
  OR: [CreditScalarWhereWithAggregatesInput!]
  idArtist: StringWithAggregatesFilter
  idCredit: StringWithAggregatesFilter
  idVinyl: StringWithAggregatesFilter
  note: StringNullableWithAggregatesFilter
  role: StringNullableWithAggregatesFilter
}

input CreditUpdateInput {
  artist: ArtistUpdateOneRequiredWithoutCreditsNestedInput
  idCredit: StringFieldUpdateOperationsInput
  note: NullableStringFieldUpdateOperationsInput
  role: NullableStringFieldUpdateOperationsInput
  vinyl: VinylUpdateOneRequiredWithoutCreditsNestedInput
}

input CreditUpdateManyMutationInput {
  idCredit: StringFieldUpdateOperationsInput
  note: NullableStringFieldUpdateOperationsInput
  role: NullableStringFieldUpdateOperationsInput
}

input CreditUpdateManyWithWhereWithoutArtistInput {
  data: CreditUpdateManyMutationInput!
  where: CreditScalarWhereInput!
}

input CreditUpdateManyWithWhereWithoutVinylInput {
  data: CreditUpdateManyMutationInput!
  where: CreditScalarWhereInput!
}

input CreditUpdateManyWithoutArtistNestedInput {
  connect: [CreditWhereUniqueInput!]
  connectOrCreate: [CreditCreateOrConnectWithoutArtistInput!]
  create: [CreditCreateWithoutArtistInput!]
  createMany: CreditCreateManyArtistInputEnvelope
  delete: [CreditWhereUniqueInput!]
  deleteMany: [CreditScalarWhereInput!]
  disconnect: [CreditWhereUniqueInput!]
  set: [CreditWhereUniqueInput!]
  update: [CreditUpdateWithWhereUniqueWithoutArtistInput!]
  updateMany: [CreditUpdateManyWithWhereWithoutArtistInput!]
  upsert: [CreditUpsertWithWhereUniqueWithoutArtistInput!]
}

input CreditUpdateManyWithoutVinylNestedInput {
  connect: [CreditWhereUniqueInput!]
  connectOrCreate: [CreditCreateOrConnectWithoutVinylInput!]
  create: [CreditCreateWithoutVinylInput!]
  createMany: CreditCreateManyVinylInputEnvelope
  delete: [CreditWhereUniqueInput!]
  deleteMany: [CreditScalarWhereInput!]
  disconnect: [CreditWhereUniqueInput!]
  set: [CreditWhereUniqueInput!]
  update: [CreditUpdateWithWhereUniqueWithoutVinylInput!]
  updateMany: [CreditUpdateManyWithWhereWithoutVinylInput!]
  upsert: [CreditUpsertWithWhereUniqueWithoutVinylInput!]
}

input CreditUpdateWithWhereUniqueWithoutArtistInput {
  data: CreditUpdateWithoutArtistInput!
  where: CreditWhereUniqueInput!
}

input CreditUpdateWithWhereUniqueWithoutVinylInput {
  data: CreditUpdateWithoutVinylInput!
  where: CreditWhereUniqueInput!
}

input CreditUpdateWithoutArtistInput {
  idCredit: StringFieldUpdateOperationsInput
  note: NullableStringFieldUpdateOperationsInput
  role: NullableStringFieldUpdateOperationsInput
  vinyl: VinylUpdateOneRequiredWithoutCreditsNestedInput
}

input CreditUpdateWithoutVinylInput {
  artist: ArtistUpdateOneRequiredWithoutCreditsNestedInput
  idCredit: StringFieldUpdateOperationsInput
  note: NullableStringFieldUpdateOperationsInput
  role: NullableStringFieldUpdateOperationsInput
}

input CreditUpsertWithWhereUniqueWithoutArtistInput {
  create: CreditCreateWithoutArtistInput!
  update: CreditUpdateWithoutArtistInput!
  where: CreditWhereUniqueInput!
}

input CreditUpsertWithWhereUniqueWithoutVinylInput {
  create: CreditCreateWithoutVinylInput!
  update: CreditUpdateWithoutVinylInput!
  where: CreditWhereUniqueInput!
}

input CreditWhereInput {
  AND: [CreditWhereInput!]
  NOT: [CreditWhereInput!]
  OR: [CreditWhereInput!]
  artist: ArtistRelationFilter
  idArtist: StringFilter
  idCredit: StringFilter
  idVinyl: StringFilter
  note: StringNullableFilter
  role: StringNullableFilter
  vinyl: VinylRelationFilter
}

input CreditWhereUniqueInput {
  AND: [CreditWhereInput!]
  NOT: [CreditWhereInput!]
  OR: [CreditWhereInput!]
  artist: ArtistRelationFilter
  idArtist: StringFilter
  idCredit: String
  idVinyl: StringFilter
  note: StringNullableFilter
  role: StringNullableFilter
  vinyl: VinylRelationFilter
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTimeISO
}

input DateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input DateTimeNullableFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableFilter
  notIn: [DateTimeISO!]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

type Image {
  idImage: String!
  idVinyl: String!
  path: String!
  vinyl: Vinyl!
}

type ImageCountAggregate {
  _all: Int!
  idImage: Int!
  idVinyl: Int!
  path: Int!
}

input ImageCountOrderByAggregateInput {
  idImage: SortOrder
  idVinyl: SortOrder
  path: SortOrder
}

input ImageCreateInput {
  idImage: String
  path: String!
  vinyl: VinylCreateNestedOneWithoutImagesInput!
}

input ImageCreateManyInput {
  idImage: String
  idVinyl: String!
  path: String!
}

input ImageCreateManyVinylInput {
  idImage: String
  path: String!
}

input ImageCreateManyVinylInputEnvelope {
  data: [ImageCreateManyVinylInput!]!
  skipDuplicates: Boolean
}

input ImageCreateNestedManyWithoutVinylInput {
  connect: [ImageWhereUniqueInput!]
  connectOrCreate: [ImageCreateOrConnectWithoutVinylInput!]
  create: [ImageCreateWithoutVinylInput!]
  createMany: ImageCreateManyVinylInputEnvelope
}

input ImageCreateOrConnectWithoutVinylInput {
  create: ImageCreateWithoutVinylInput!
  where: ImageWhereUniqueInput!
}

input ImageCreateWithoutVinylInput {
  idImage: String
  path: String!
}

type ImageGroupBy {
  _count: ImageCountAggregate
  _max: ImageMaxAggregate
  _min: ImageMinAggregate
  idImage: String!
  idVinyl: String!
  path: String!
}

input ImageListRelationFilter {
  every: ImageWhereInput
  none: ImageWhereInput
  some: ImageWhereInput
}

type ImageMaxAggregate {
  idImage: String
  idVinyl: String
  path: String
}

input ImageMaxOrderByAggregateInput {
  idImage: SortOrder
  idVinyl: SortOrder
  path: SortOrder
}

type ImageMinAggregate {
  idImage: String
  idVinyl: String
  path: String
}

input ImageMinOrderByAggregateInput {
  idImage: SortOrder
  idVinyl: SortOrder
  path: SortOrder
}

input ImageOrderByRelationAggregateInput {
  _count: SortOrder
}

input ImageOrderByWithAggregationInput {
  _count: ImageCountOrderByAggregateInput
  _max: ImageMaxOrderByAggregateInput
  _min: ImageMinOrderByAggregateInput
  idImage: SortOrder
  idVinyl: SortOrder
  path: SortOrder
}

input ImageOrderByWithRelationInput {
  idImage: SortOrder
  idVinyl: SortOrder
  path: SortOrder
  vinyl: VinylOrderByWithRelationInput
}

enum ImageScalarFieldEnum {
  idImage
  idVinyl
  path
}

input ImageScalarWhereInput {
  AND: [ImageScalarWhereInput!]
  NOT: [ImageScalarWhereInput!]
  OR: [ImageScalarWhereInput!]
  idImage: StringFilter
  idVinyl: StringFilter
  path: StringFilter
}

input ImageScalarWhereWithAggregatesInput {
  AND: [ImageScalarWhereWithAggregatesInput!]
  NOT: [ImageScalarWhereWithAggregatesInput!]
  OR: [ImageScalarWhereWithAggregatesInput!]
  idImage: StringWithAggregatesFilter
  idVinyl: StringWithAggregatesFilter
  path: StringWithAggregatesFilter
}

input ImageUpdateInput {
  idImage: StringFieldUpdateOperationsInput
  path: StringFieldUpdateOperationsInput
  vinyl: VinylUpdateOneRequiredWithoutImagesNestedInput
}

input ImageUpdateManyMutationInput {
  idImage: StringFieldUpdateOperationsInput
  path: StringFieldUpdateOperationsInput
}

input ImageUpdateManyWithWhereWithoutVinylInput {
  data: ImageUpdateManyMutationInput!
  where: ImageScalarWhereInput!
}

input ImageUpdateManyWithoutVinylNestedInput {
  connect: [ImageWhereUniqueInput!]
  connectOrCreate: [ImageCreateOrConnectWithoutVinylInput!]
  create: [ImageCreateWithoutVinylInput!]
  createMany: ImageCreateManyVinylInputEnvelope
  delete: [ImageWhereUniqueInput!]
  deleteMany: [ImageScalarWhereInput!]
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  update: [ImageUpdateWithWhereUniqueWithoutVinylInput!]
  updateMany: [ImageUpdateManyWithWhereWithoutVinylInput!]
  upsert: [ImageUpsertWithWhereUniqueWithoutVinylInput!]
}

input ImageUpdateWithWhereUniqueWithoutVinylInput {
  data: ImageUpdateWithoutVinylInput!
  where: ImageWhereUniqueInput!
}

input ImageUpdateWithoutVinylInput {
  idImage: StringFieldUpdateOperationsInput
  path: StringFieldUpdateOperationsInput
}

input ImageUpsertWithWhereUniqueWithoutVinylInput {
  create: ImageCreateWithoutVinylInput!
  update: ImageUpdateWithoutVinylInput!
  where: ImageWhereUniqueInput!
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  idImage: StringFilter
  idVinyl: StringFilter
  path: StringFilter
  vinyl: VinylRelationFilter
}

input ImageWhereUniqueInput {
  AND: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  idImage: String
  idVinyl: StringFilter
  path: String
  vinyl: VinylRelationFilter
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

type Label {
  _count: LabelCount
  idLabel: String!
  name: String!
  vinyls(cursor: VinylWhereUniqueInput, distinct: [VinylScalarFieldEnum!], orderBy: [VinylOrderByWithRelationInput!], skip: Int, take: Int, where: VinylWhereInput): [Vinyl!]!
}

type LabelCount {
  vinyls(where: VinylWhereInput): Int!
}

type LabelCountAggregate {
  _all: Int!
  idLabel: Int!
  name: Int!
}

input LabelCountOrderByAggregateInput {
  idLabel: SortOrder
  name: SortOrder
}

input LabelCreateInput {
  idLabel: String
  name: String!
  vinyls: VinylCreateNestedManyWithoutLabelInput
}

input LabelCreateManyInput {
  idLabel: String
  name: String!
}

input LabelCreateNestedOneWithoutVinylsInput {
  connect: LabelWhereUniqueInput
  connectOrCreate: LabelCreateOrConnectWithoutVinylsInput
  create: LabelCreateWithoutVinylsInput
}

input LabelCreateOrConnectWithoutVinylsInput {
  create: LabelCreateWithoutVinylsInput!
  where: LabelWhereUniqueInput!
}

input LabelCreateWithoutVinylsInput {
  idLabel: String
  name: String!
}

type LabelGroupBy {
  _count: LabelCountAggregate
  _max: LabelMaxAggregate
  _min: LabelMinAggregate
  idLabel: String!
  name: String!
}

type LabelMaxAggregate {
  idLabel: String
  name: String
}

input LabelMaxOrderByAggregateInput {
  idLabel: SortOrder
  name: SortOrder
}

type LabelMinAggregate {
  idLabel: String
  name: String
}

input LabelMinOrderByAggregateInput {
  idLabel: SortOrder
  name: SortOrder
}

input LabelNullableRelationFilter {
  is: LabelWhereInput
  isNot: LabelWhereInput
}

input LabelOrderByWithAggregationInput {
  _count: LabelCountOrderByAggregateInput
  _max: LabelMaxOrderByAggregateInput
  _min: LabelMinOrderByAggregateInput
  idLabel: SortOrder
  name: SortOrder
}

input LabelOrderByWithRelationInput {
  idLabel: SortOrder
  name: SortOrder
  vinyls: VinylOrderByRelationAggregateInput
}

enum LabelScalarFieldEnum {
  idLabel
  name
}

input LabelScalarWhereWithAggregatesInput {
  AND: [LabelScalarWhereWithAggregatesInput!]
  NOT: [LabelScalarWhereWithAggregatesInput!]
  OR: [LabelScalarWhereWithAggregatesInput!]
  idLabel: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
}

input LabelUpdateInput {
  idLabel: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  vinyls: VinylUpdateManyWithoutLabelNestedInput
}

input LabelUpdateManyMutationInput {
  idLabel: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input LabelUpdateOneWithoutVinylsNestedInput {
  connect: LabelWhereUniqueInput
  connectOrCreate: LabelCreateOrConnectWithoutVinylsInput
  create: LabelCreateWithoutVinylsInput
  delete: LabelWhereInput
  disconnect: LabelWhereInput
  update: LabelUpdateToOneWithWhereWithoutVinylsInput
  upsert: LabelUpsertWithoutVinylsInput
}

input LabelUpdateToOneWithWhereWithoutVinylsInput {
  data: LabelUpdateWithoutVinylsInput!
  where: LabelWhereInput
}

input LabelUpdateWithoutVinylsInput {
  idLabel: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input LabelUpsertWithoutVinylsInput {
  create: LabelCreateWithoutVinylsInput!
  update: LabelUpdateWithoutVinylsInput!
  where: LabelWhereInput
}

input LabelWhereInput {
  AND: [LabelWhereInput!]
  NOT: [LabelWhereInput!]
  OR: [LabelWhereInput!]
  idLabel: StringFilter
  name: StringFilter
  vinyls: VinylListRelationFilter
}

input LabelWhereUniqueInput {
  AND: [LabelWhereInput!]
  NOT: [LabelWhereInput!]
  OR: [LabelWhereInput!]
  idLabel: String
  name: String
  vinyls: VinylListRelationFilter
}

type Mutation {
  createManyAlbum(data: [AlbumCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyArtist(data: [ArtistCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyAuthored(data: [AuthoredCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyBought(data: [BoughtCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyCredit(data: [CreditCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyImage(data: [ImageCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyLabel(data: [LabelCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyPlayedBy(data: [PlayedByCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyPocketState(data: [PocketStateCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyReadSpeed(data: [ReadSpeedCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyState(data: [StateCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyTrack(data: [TrackCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyVinyl(data: [VinylCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneAlbum(data: AlbumCreateInput!): Album!
  createOneArtist(data: ArtistCreateInput!): Artist!
  createOneAuthored(data: AuthoredCreateInput!): Authored!
  createOneBought(data: BoughtCreateInput!): Bought!
  createOneCredit(data: CreditCreateInput!): Credit!
  createOneImage(data: ImageCreateInput!): Image!
  createOneLabel(data: LabelCreateInput!): Label!
  createOnePlayedBy(data: PlayedByCreateInput!): PlayedBy!
  createOnePocketState(data: PocketStateCreateInput!): PocketState!
  createOneReadSpeed(data: ReadSpeedCreateInput!): ReadSpeed!
  createOneState(data: StateCreateInput!): State!
  createOneTrack(data: TrackCreateInput!): Track!
  createOneVinyl(data: VinylCreateInput!): Vinyl!
  deleteManyAlbum(where: AlbumWhereInput): AffectedRowsOutput!
  deleteManyArtist(where: ArtistWhereInput): AffectedRowsOutput!
  deleteManyAuthored(where: AuthoredWhereInput): AffectedRowsOutput!
  deleteManyBought(where: BoughtWhereInput): AffectedRowsOutput!
  deleteManyCredit(where: CreditWhereInput): AffectedRowsOutput!
  deleteManyImage(where: ImageWhereInput): AffectedRowsOutput!
  deleteManyLabel(where: LabelWhereInput): AffectedRowsOutput!
  deleteManyPlayedBy(where: PlayedByWhereInput): AffectedRowsOutput!
  deleteManyPocketState(where: PocketStateWhereInput): AffectedRowsOutput!
  deleteManyReadSpeed(where: ReadSpeedWhereInput): AffectedRowsOutput!
  deleteManyState(where: StateWhereInput): AffectedRowsOutput!
  deleteManyTrack(where: TrackWhereInput): AffectedRowsOutput!
  deleteManyVinyl(where: VinylWhereInput): AffectedRowsOutput!
  deleteOneAlbum(where: AlbumWhereUniqueInput!): Album
  deleteOneArtist(where: ArtistWhereUniqueInput!): Artist
  deleteOneAuthored(where: AuthoredWhereUniqueInput!): Authored
  deleteOneBought(where: BoughtWhereUniqueInput!): Bought
  deleteOneCredit(where: CreditWhereUniqueInput!): Credit
  deleteOneImage(where: ImageWhereUniqueInput!): Image
  deleteOneLabel(where: LabelWhereUniqueInput!): Label
  deleteOnePlayedBy(where: PlayedByWhereUniqueInput!): PlayedBy
  deleteOnePocketState(where: PocketStateWhereUniqueInput!): PocketState
  deleteOneReadSpeed(where: ReadSpeedWhereUniqueInput!): ReadSpeed
  deleteOneState(where: StateWhereUniqueInput!): State
  deleteOneTrack(where: TrackWhereUniqueInput!): Track
  deleteOneVinyl(where: VinylWhereUniqueInput!): Vinyl
  updateManyAlbum(data: AlbumUpdateManyMutationInput!, where: AlbumWhereInput): AffectedRowsOutput!
  updateManyArtist(data: ArtistUpdateManyMutationInput!, where: ArtistWhereInput): AffectedRowsOutput!
  updateManyAuthored(data: AuthoredUpdateManyMutationInput!, where: AuthoredWhereInput): AffectedRowsOutput!
  updateManyBought(data: BoughtUpdateManyMutationInput!, where: BoughtWhereInput): AffectedRowsOutput!
  updateManyCredit(data: CreditUpdateManyMutationInput!, where: CreditWhereInput): AffectedRowsOutput!
  updateManyImage(data: ImageUpdateManyMutationInput!, where: ImageWhereInput): AffectedRowsOutput!
  updateManyLabel(data: LabelUpdateManyMutationInput!, where: LabelWhereInput): AffectedRowsOutput!
  updateManyPlayedBy(data: PlayedByUpdateManyMutationInput!, where: PlayedByWhereInput): AffectedRowsOutput!
  updateManyPocketState(data: PocketStateUpdateManyMutationInput!, where: PocketStateWhereInput): AffectedRowsOutput!
  updateManyReadSpeed(data: ReadSpeedUpdateManyMutationInput!, where: ReadSpeedWhereInput): AffectedRowsOutput!
  updateManyState(data: StateUpdateManyMutationInput!, where: StateWhereInput): AffectedRowsOutput!
  updateManyTrack(data: TrackUpdateManyMutationInput!, where: TrackWhereInput): AffectedRowsOutput!
  updateManyVinyl(data: VinylUpdateManyMutationInput!, where: VinylWhereInput): AffectedRowsOutput!
  updateOneAlbum(data: AlbumUpdateInput!, where: AlbumWhereUniqueInput!): Album
  updateOneArtist(data: ArtistUpdateInput!, where: ArtistWhereUniqueInput!): Artist
  updateOneAuthored(data: AuthoredUpdateInput!, where: AuthoredWhereUniqueInput!): Authored
  updateOneBought(data: BoughtUpdateInput!, where: BoughtWhereUniqueInput!): Bought
  updateOneCredit(data: CreditUpdateInput!, where: CreditWhereUniqueInput!): Credit
  updateOneImage(data: ImageUpdateInput!, where: ImageWhereUniqueInput!): Image
  updateOneLabel(data: LabelUpdateInput!, where: LabelWhereUniqueInput!): Label
  updateOnePlayedBy(data: PlayedByUpdateInput!, where: PlayedByWhereUniqueInput!): PlayedBy
  updateOnePocketState(data: PocketStateUpdateInput!, where: PocketStateWhereUniqueInput!): PocketState
  updateOneReadSpeed(data: ReadSpeedUpdateInput!, where: ReadSpeedWhereUniqueInput!): ReadSpeed
  updateOneState(data: StateUpdateInput!, where: StateWhereUniqueInput!): State
  updateOneTrack(data: TrackUpdateInput!, where: TrackWhereUniqueInput!): Track
  updateOneVinyl(data: VinylUpdateInput!, where: VinylWhereUniqueInput!): Vinyl
  upsertOneAlbum(create: AlbumCreateInput!, update: AlbumUpdateInput!, where: AlbumWhereUniqueInput!): Album!
  upsertOneArtist(create: ArtistCreateInput!, update: ArtistUpdateInput!, where: ArtistWhereUniqueInput!): Artist!
  upsertOneAuthored(create: AuthoredCreateInput!, update: AuthoredUpdateInput!, where: AuthoredWhereUniqueInput!): Authored!
  upsertOneBought(create: BoughtCreateInput!, update: BoughtUpdateInput!, where: BoughtWhereUniqueInput!): Bought!
  upsertOneCredit(create: CreditCreateInput!, update: CreditUpdateInput!, where: CreditWhereUniqueInput!): Credit!
  upsertOneImage(create: ImageCreateInput!, update: ImageUpdateInput!, where: ImageWhereUniqueInput!): Image!
  upsertOneLabel(create: LabelCreateInput!, update: LabelUpdateInput!, where: LabelWhereUniqueInput!): Label!
  upsertOnePlayedBy(create: PlayedByCreateInput!, update: PlayedByUpdateInput!, where: PlayedByWhereUniqueInput!): PlayedBy!
  upsertOnePocketState(create: PocketStateCreateInput!, update: PocketStateUpdateInput!, where: PocketStateWhereUniqueInput!): PocketState!
  upsertOneReadSpeed(create: ReadSpeedCreateInput!, update: ReadSpeedUpdateInput!, where: ReadSpeedWhereUniqueInput!): ReadSpeed!
  upsertOneState(create: StateCreateInput!, update: StateUpdateInput!, where: StateWhereUniqueInput!): State!
  upsertOneTrack(create: TrackCreateInput!, update: TrackUpdateInput!, where: TrackWhereUniqueInput!): Track!
  upsertOneVinyl(create: VinylCreateInput!, update: VinylUpdateInput!, where: VinylWhereUniqueInput!): Vinyl!
}

input NestedDateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeNullableFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTimeISO
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

enum NullsOrder {
  first
  last
}

type PlayedBy {
  artist: Artist!
  idArtist: String!
  idPlayedBy: String!
  idVinyl: String!
  vinyl: Vinyl!
}

type PlayedByCountAggregate {
  _all: Int!
  idArtist: Int!
  idPlayedBy: Int!
  idVinyl: Int!
}

input PlayedByCountOrderByAggregateInput {
  idArtist: SortOrder
  idPlayedBy: SortOrder
  idVinyl: SortOrder
}

input PlayedByCreateInput {
  artist: ArtistCreateNestedOneWithoutPlayedByInput!
  idPlayedBy: String
  vinyl: VinylCreateNestedOneWithoutPlayedByInput!
}

input PlayedByCreateManyArtistInput {
  idPlayedBy: String
  idVinyl: String!
}

input PlayedByCreateManyArtistInputEnvelope {
  data: [PlayedByCreateManyArtistInput!]!
  skipDuplicates: Boolean
}

input PlayedByCreateManyInput {
  idArtist: String!
  idPlayedBy: String
  idVinyl: String!
}

input PlayedByCreateManyVinylInput {
  idArtist: String!
  idPlayedBy: String
}

input PlayedByCreateManyVinylInputEnvelope {
  data: [PlayedByCreateManyVinylInput!]!
  skipDuplicates: Boolean
}

input PlayedByCreateNestedManyWithoutArtistInput {
  connect: [PlayedByWhereUniqueInput!]
  connectOrCreate: [PlayedByCreateOrConnectWithoutArtistInput!]
  create: [PlayedByCreateWithoutArtistInput!]
  createMany: PlayedByCreateManyArtistInputEnvelope
}

input PlayedByCreateNestedManyWithoutVinylInput {
  connect: [PlayedByWhereUniqueInput!]
  connectOrCreate: [PlayedByCreateOrConnectWithoutVinylInput!]
  create: [PlayedByCreateWithoutVinylInput!]
  createMany: PlayedByCreateManyVinylInputEnvelope
}

input PlayedByCreateOrConnectWithoutArtistInput {
  create: PlayedByCreateWithoutArtistInput!
  where: PlayedByWhereUniqueInput!
}

input PlayedByCreateOrConnectWithoutVinylInput {
  create: PlayedByCreateWithoutVinylInput!
  where: PlayedByWhereUniqueInput!
}

input PlayedByCreateWithoutArtistInput {
  idPlayedBy: String
  vinyl: VinylCreateNestedOneWithoutPlayedByInput!
}

input PlayedByCreateWithoutVinylInput {
  artist: ArtistCreateNestedOneWithoutPlayedByInput!
  idPlayedBy: String
}

type PlayedByGroupBy {
  _count: PlayedByCountAggregate
  _max: PlayedByMaxAggregate
  _min: PlayedByMinAggregate
  idArtist: String!
  idPlayedBy: String!
  idVinyl: String!
}

input PlayedByIdArtistIdVinylCompoundUniqueInput {
  idArtist: String!
  idVinyl: String!
}

input PlayedByListRelationFilter {
  every: PlayedByWhereInput
  none: PlayedByWhereInput
  some: PlayedByWhereInput
}

type PlayedByMaxAggregate {
  idArtist: String
  idPlayedBy: String
  idVinyl: String
}

input PlayedByMaxOrderByAggregateInput {
  idArtist: SortOrder
  idPlayedBy: SortOrder
  idVinyl: SortOrder
}

type PlayedByMinAggregate {
  idArtist: String
  idPlayedBy: String
  idVinyl: String
}

input PlayedByMinOrderByAggregateInput {
  idArtist: SortOrder
  idPlayedBy: SortOrder
  idVinyl: SortOrder
}

input PlayedByOrderByRelationAggregateInput {
  _count: SortOrder
}

input PlayedByOrderByWithAggregationInput {
  _count: PlayedByCountOrderByAggregateInput
  _max: PlayedByMaxOrderByAggregateInput
  _min: PlayedByMinOrderByAggregateInput
  idArtist: SortOrder
  idPlayedBy: SortOrder
  idVinyl: SortOrder
}

input PlayedByOrderByWithRelationInput {
  artist: ArtistOrderByWithRelationInput
  idArtist: SortOrder
  idPlayedBy: SortOrder
  idVinyl: SortOrder
  vinyl: VinylOrderByWithRelationInput
}

enum PlayedByScalarFieldEnum {
  idArtist
  idPlayedBy
  idVinyl
}

input PlayedByScalarWhereInput {
  AND: [PlayedByScalarWhereInput!]
  NOT: [PlayedByScalarWhereInput!]
  OR: [PlayedByScalarWhereInput!]
  idArtist: StringFilter
  idPlayedBy: StringFilter
  idVinyl: StringFilter
}

input PlayedByScalarWhereWithAggregatesInput {
  AND: [PlayedByScalarWhereWithAggregatesInput!]
  NOT: [PlayedByScalarWhereWithAggregatesInput!]
  OR: [PlayedByScalarWhereWithAggregatesInput!]
  idArtist: StringWithAggregatesFilter
  idPlayedBy: StringWithAggregatesFilter
  idVinyl: StringWithAggregatesFilter
}

input PlayedByUpdateInput {
  artist: ArtistUpdateOneRequiredWithoutPlayedByNestedInput
  idPlayedBy: StringFieldUpdateOperationsInput
  vinyl: VinylUpdateOneRequiredWithoutPlayedByNestedInput
}

input PlayedByUpdateManyMutationInput {
  idPlayedBy: StringFieldUpdateOperationsInput
}

input PlayedByUpdateManyWithWhereWithoutArtistInput {
  data: PlayedByUpdateManyMutationInput!
  where: PlayedByScalarWhereInput!
}

input PlayedByUpdateManyWithWhereWithoutVinylInput {
  data: PlayedByUpdateManyMutationInput!
  where: PlayedByScalarWhereInput!
}

input PlayedByUpdateManyWithoutArtistNestedInput {
  connect: [PlayedByWhereUniqueInput!]
  connectOrCreate: [PlayedByCreateOrConnectWithoutArtistInput!]
  create: [PlayedByCreateWithoutArtistInput!]
  createMany: PlayedByCreateManyArtistInputEnvelope
  delete: [PlayedByWhereUniqueInput!]
  deleteMany: [PlayedByScalarWhereInput!]
  disconnect: [PlayedByWhereUniqueInput!]
  set: [PlayedByWhereUniqueInput!]
  update: [PlayedByUpdateWithWhereUniqueWithoutArtistInput!]
  updateMany: [PlayedByUpdateManyWithWhereWithoutArtistInput!]
  upsert: [PlayedByUpsertWithWhereUniqueWithoutArtistInput!]
}

input PlayedByUpdateManyWithoutVinylNestedInput {
  connect: [PlayedByWhereUniqueInput!]
  connectOrCreate: [PlayedByCreateOrConnectWithoutVinylInput!]
  create: [PlayedByCreateWithoutVinylInput!]
  createMany: PlayedByCreateManyVinylInputEnvelope
  delete: [PlayedByWhereUniqueInput!]
  deleteMany: [PlayedByScalarWhereInput!]
  disconnect: [PlayedByWhereUniqueInput!]
  set: [PlayedByWhereUniqueInput!]
  update: [PlayedByUpdateWithWhereUniqueWithoutVinylInput!]
  updateMany: [PlayedByUpdateManyWithWhereWithoutVinylInput!]
  upsert: [PlayedByUpsertWithWhereUniqueWithoutVinylInput!]
}

input PlayedByUpdateWithWhereUniqueWithoutArtistInput {
  data: PlayedByUpdateWithoutArtistInput!
  where: PlayedByWhereUniqueInput!
}

input PlayedByUpdateWithWhereUniqueWithoutVinylInput {
  data: PlayedByUpdateWithoutVinylInput!
  where: PlayedByWhereUniqueInput!
}

input PlayedByUpdateWithoutArtistInput {
  idPlayedBy: StringFieldUpdateOperationsInput
  vinyl: VinylUpdateOneRequiredWithoutPlayedByNestedInput
}

input PlayedByUpdateWithoutVinylInput {
  artist: ArtistUpdateOneRequiredWithoutPlayedByNestedInput
  idPlayedBy: StringFieldUpdateOperationsInput
}

input PlayedByUpsertWithWhereUniqueWithoutArtistInput {
  create: PlayedByCreateWithoutArtistInput!
  update: PlayedByUpdateWithoutArtistInput!
  where: PlayedByWhereUniqueInput!
}

input PlayedByUpsertWithWhereUniqueWithoutVinylInput {
  create: PlayedByCreateWithoutVinylInput!
  update: PlayedByUpdateWithoutVinylInput!
  where: PlayedByWhereUniqueInput!
}

input PlayedByWhereInput {
  AND: [PlayedByWhereInput!]
  NOT: [PlayedByWhereInput!]
  OR: [PlayedByWhereInput!]
  artist: ArtistRelationFilter
  idArtist: StringFilter
  idPlayedBy: StringFilter
  idVinyl: StringFilter
  vinyl: VinylRelationFilter
}

input PlayedByWhereUniqueInput {
  AND: [PlayedByWhereInput!]
  NOT: [PlayedByWhereInput!]
  OR: [PlayedByWhereInput!]
  artist: ArtistRelationFilter
  idArtist: StringFilter
  idArtist_idVinyl: PlayedByIdArtistIdVinylCompoundUniqueInput
  idPlayedBy: String
  idVinyl: StringFilter
  vinyl: VinylRelationFilter
}

type PocketState {
  _count: PocketStateCount
  idPocketState: String!
  name: String!
  vinyls(cursor: VinylWhereUniqueInput, distinct: [VinylScalarFieldEnum!], orderBy: [VinylOrderByWithRelationInput!], skip: Int, take: Int, where: VinylWhereInput): [Vinyl!]!
}

type PocketStateCount {
  vinyls(where: VinylWhereInput): Int!
}

type PocketStateCountAggregate {
  _all: Int!
  idPocketState: Int!
  name: Int!
}

input PocketStateCountOrderByAggregateInput {
  idPocketState: SortOrder
  name: SortOrder
}

input PocketStateCreateInput {
  idPocketState: String
  name: String!
  vinyls: VinylCreateNestedManyWithoutPocketStateInput
}

input PocketStateCreateManyInput {
  idPocketState: String
  name: String!
}

input PocketStateCreateNestedOneWithoutVinylsInput {
  connect: PocketStateWhereUniqueInput
  connectOrCreate: PocketStateCreateOrConnectWithoutVinylsInput
  create: PocketStateCreateWithoutVinylsInput
}

input PocketStateCreateOrConnectWithoutVinylsInput {
  create: PocketStateCreateWithoutVinylsInput!
  where: PocketStateWhereUniqueInput!
}

input PocketStateCreateWithoutVinylsInput {
  idPocketState: String
  name: String!
}

type PocketStateGroupBy {
  _count: PocketStateCountAggregate
  _max: PocketStateMaxAggregate
  _min: PocketStateMinAggregate
  idPocketState: String!
  name: String!
}

type PocketStateMaxAggregate {
  idPocketState: String
  name: String
}

input PocketStateMaxOrderByAggregateInput {
  idPocketState: SortOrder
  name: SortOrder
}

type PocketStateMinAggregate {
  idPocketState: String
  name: String
}

input PocketStateMinOrderByAggregateInput {
  idPocketState: SortOrder
  name: SortOrder
}

input PocketStateNullableRelationFilter {
  is: PocketStateWhereInput
  isNot: PocketStateWhereInput
}

input PocketStateOrderByWithAggregationInput {
  _count: PocketStateCountOrderByAggregateInput
  _max: PocketStateMaxOrderByAggregateInput
  _min: PocketStateMinOrderByAggregateInput
  idPocketState: SortOrder
  name: SortOrder
}

input PocketStateOrderByWithRelationInput {
  idPocketState: SortOrder
  name: SortOrder
  vinyls: VinylOrderByRelationAggregateInput
}

enum PocketStateScalarFieldEnum {
  idPocketState
  name
}

input PocketStateScalarWhereWithAggregatesInput {
  AND: [PocketStateScalarWhereWithAggregatesInput!]
  NOT: [PocketStateScalarWhereWithAggregatesInput!]
  OR: [PocketStateScalarWhereWithAggregatesInput!]
  idPocketState: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
}

input PocketStateUpdateInput {
  idPocketState: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  vinyls: VinylUpdateManyWithoutPocketStateNestedInput
}

input PocketStateUpdateManyMutationInput {
  idPocketState: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input PocketStateUpdateOneWithoutVinylsNestedInput {
  connect: PocketStateWhereUniqueInput
  connectOrCreate: PocketStateCreateOrConnectWithoutVinylsInput
  create: PocketStateCreateWithoutVinylsInput
  delete: PocketStateWhereInput
  disconnect: PocketStateWhereInput
  update: PocketStateUpdateToOneWithWhereWithoutVinylsInput
  upsert: PocketStateUpsertWithoutVinylsInput
}

input PocketStateUpdateToOneWithWhereWithoutVinylsInput {
  data: PocketStateUpdateWithoutVinylsInput!
  where: PocketStateWhereInput
}

input PocketStateUpdateWithoutVinylsInput {
  idPocketState: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input PocketStateUpsertWithoutVinylsInput {
  create: PocketStateCreateWithoutVinylsInput!
  update: PocketStateUpdateWithoutVinylsInput!
  where: PocketStateWhereInput
}

input PocketStateWhereInput {
  AND: [PocketStateWhereInput!]
  NOT: [PocketStateWhereInput!]
  OR: [PocketStateWhereInput!]
  idPocketState: StringFilter
  name: StringFilter
  vinyls: VinylListRelationFilter
}

input PocketStateWhereUniqueInput {
  AND: [PocketStateWhereInput!]
  NOT: [PocketStateWhereInput!]
  OR: [PocketStateWhereInput!]
  idPocketState: String
  name: String
  vinyls: VinylListRelationFilter
}

type Query {
  aggregateAlbum(cursor: AlbumWhereUniqueInput, orderBy: [AlbumOrderByWithRelationInput!], skip: Int, take: Int, where: AlbumWhereInput): AggregateAlbum!
  aggregateArtist(cursor: ArtistWhereUniqueInput, orderBy: [ArtistOrderByWithRelationInput!], skip: Int, take: Int, where: ArtistWhereInput): AggregateArtist!
  aggregateAuthored(cursor: AuthoredWhereUniqueInput, orderBy: [AuthoredOrderByWithRelationInput!], skip: Int, take: Int, where: AuthoredWhereInput): AggregateAuthored!
  aggregateBought(cursor: BoughtWhereUniqueInput, orderBy: [BoughtOrderByWithRelationInput!], skip: Int, take: Int, where: BoughtWhereInput): AggregateBought!
  aggregateCredit(cursor: CreditWhereUniqueInput, orderBy: [CreditOrderByWithRelationInput!], skip: Int, take: Int, where: CreditWhereInput): AggregateCredit!
  aggregateImage(cursor: ImageWhereUniqueInput, orderBy: [ImageOrderByWithRelationInput!], skip: Int, take: Int, where: ImageWhereInput): AggregateImage!
  aggregateLabel(cursor: LabelWhereUniqueInput, orderBy: [LabelOrderByWithRelationInput!], skip: Int, take: Int, where: LabelWhereInput): AggregateLabel!
  aggregatePlayedBy(cursor: PlayedByWhereUniqueInput, orderBy: [PlayedByOrderByWithRelationInput!], skip: Int, take: Int, where: PlayedByWhereInput): AggregatePlayedBy!
  aggregatePocketState(cursor: PocketStateWhereUniqueInput, orderBy: [PocketStateOrderByWithRelationInput!], skip: Int, take: Int, where: PocketStateWhereInput): AggregatePocketState!
  aggregateReadSpeed(cursor: ReadSpeedWhereUniqueInput, orderBy: [ReadSpeedOrderByWithRelationInput!], skip: Int, take: Int, where: ReadSpeedWhereInput): AggregateReadSpeed!
  aggregateState(cursor: StateWhereUniqueInput, orderBy: [StateOrderByWithRelationInput!], skip: Int, take: Int, where: StateWhereInput): AggregateState!
  aggregateTrack(cursor: TrackWhereUniqueInput, orderBy: [TrackOrderByWithRelationInput!], skip: Int, take: Int, where: TrackWhereInput): AggregateTrack!
  aggregateVinyl(cursor: VinylWhereUniqueInput, orderBy: [VinylOrderByWithRelationInput!], skip: Int, take: Int, where: VinylWhereInput): AggregateVinyl!
  album(where: AlbumWhereUniqueInput!): Album
  albums(cursor: AlbumWhereUniqueInput, distinct: [AlbumScalarFieldEnum!], orderBy: [AlbumOrderByWithRelationInput!], skip: Int, take: Int, where: AlbumWhereInput): [Album!]!
  artist(where: ArtistWhereUniqueInput!): Artist
  artists(cursor: ArtistWhereUniqueInput, distinct: [ArtistScalarFieldEnum!], orderBy: [ArtistOrderByWithRelationInput!], skip: Int, take: Int, where: ArtistWhereInput): [Artist!]!
  authored(where: AuthoredWhereUniqueInput!): Authored
  authoreds(cursor: AuthoredWhereUniqueInput, distinct: [AuthoredScalarFieldEnum!], orderBy: [AuthoredOrderByWithRelationInput!], skip: Int, take: Int, where: AuthoredWhereInput): [Authored!]!
  bought(where: BoughtWhereUniqueInput!): Bought
  boughts(cursor: BoughtWhereUniqueInput, distinct: [BoughtScalarFieldEnum!], orderBy: [BoughtOrderByWithRelationInput!], skip: Int, take: Int, where: BoughtWhereInput): [Bought!]!
  credit(where: CreditWhereUniqueInput!): Credit
  credits(cursor: CreditWhereUniqueInput, distinct: [CreditScalarFieldEnum!], orderBy: [CreditOrderByWithRelationInput!], skip: Int, take: Int, where: CreditWhereInput): [Credit!]!
  findFirstAlbum(cursor: AlbumWhereUniqueInput, distinct: [AlbumScalarFieldEnum!], orderBy: [AlbumOrderByWithRelationInput!], skip: Int, take: Int, where: AlbumWhereInput): Album
  findFirstAlbumOrThrow(cursor: AlbumWhereUniqueInput, distinct: [AlbumScalarFieldEnum!], orderBy: [AlbumOrderByWithRelationInput!], skip: Int, take: Int, where: AlbumWhereInput): Album
  findFirstArtist(cursor: ArtistWhereUniqueInput, distinct: [ArtistScalarFieldEnum!], orderBy: [ArtistOrderByWithRelationInput!], skip: Int, take: Int, where: ArtistWhereInput): Artist
  findFirstArtistOrThrow(cursor: ArtistWhereUniqueInput, distinct: [ArtistScalarFieldEnum!], orderBy: [ArtistOrderByWithRelationInput!], skip: Int, take: Int, where: ArtistWhereInput): Artist
  findFirstAuthored(cursor: AuthoredWhereUniqueInput, distinct: [AuthoredScalarFieldEnum!], orderBy: [AuthoredOrderByWithRelationInput!], skip: Int, take: Int, where: AuthoredWhereInput): Authored
  findFirstAuthoredOrThrow(cursor: AuthoredWhereUniqueInput, distinct: [AuthoredScalarFieldEnum!], orderBy: [AuthoredOrderByWithRelationInput!], skip: Int, take: Int, where: AuthoredWhereInput): Authored
  findFirstBought(cursor: BoughtWhereUniqueInput, distinct: [BoughtScalarFieldEnum!], orderBy: [BoughtOrderByWithRelationInput!], skip: Int, take: Int, where: BoughtWhereInput): Bought
  findFirstBoughtOrThrow(cursor: BoughtWhereUniqueInput, distinct: [BoughtScalarFieldEnum!], orderBy: [BoughtOrderByWithRelationInput!], skip: Int, take: Int, where: BoughtWhereInput): Bought
  findFirstCredit(cursor: CreditWhereUniqueInput, distinct: [CreditScalarFieldEnum!], orderBy: [CreditOrderByWithRelationInput!], skip: Int, take: Int, where: CreditWhereInput): Credit
  findFirstCreditOrThrow(cursor: CreditWhereUniqueInput, distinct: [CreditScalarFieldEnum!], orderBy: [CreditOrderByWithRelationInput!], skip: Int, take: Int, where: CreditWhereInput): Credit
  findFirstImage(cursor: ImageWhereUniqueInput, distinct: [ImageScalarFieldEnum!], orderBy: [ImageOrderByWithRelationInput!], skip: Int, take: Int, where: ImageWhereInput): Image
  findFirstImageOrThrow(cursor: ImageWhereUniqueInput, distinct: [ImageScalarFieldEnum!], orderBy: [ImageOrderByWithRelationInput!], skip: Int, take: Int, where: ImageWhereInput): Image
  findFirstLabel(cursor: LabelWhereUniqueInput, distinct: [LabelScalarFieldEnum!], orderBy: [LabelOrderByWithRelationInput!], skip: Int, take: Int, where: LabelWhereInput): Label
  findFirstLabelOrThrow(cursor: LabelWhereUniqueInput, distinct: [LabelScalarFieldEnum!], orderBy: [LabelOrderByWithRelationInput!], skip: Int, take: Int, where: LabelWhereInput): Label
  findFirstPlayedBy(cursor: PlayedByWhereUniqueInput, distinct: [PlayedByScalarFieldEnum!], orderBy: [PlayedByOrderByWithRelationInput!], skip: Int, take: Int, where: PlayedByWhereInput): PlayedBy
  findFirstPlayedByOrThrow(cursor: PlayedByWhereUniqueInput, distinct: [PlayedByScalarFieldEnum!], orderBy: [PlayedByOrderByWithRelationInput!], skip: Int, take: Int, where: PlayedByWhereInput): PlayedBy
  findFirstPocketState(cursor: PocketStateWhereUniqueInput, distinct: [PocketStateScalarFieldEnum!], orderBy: [PocketStateOrderByWithRelationInput!], skip: Int, take: Int, where: PocketStateWhereInput): PocketState
  findFirstPocketStateOrThrow(cursor: PocketStateWhereUniqueInput, distinct: [PocketStateScalarFieldEnum!], orderBy: [PocketStateOrderByWithRelationInput!], skip: Int, take: Int, where: PocketStateWhereInput): PocketState
  findFirstReadSpeed(cursor: ReadSpeedWhereUniqueInput, distinct: [ReadSpeedScalarFieldEnum!], orderBy: [ReadSpeedOrderByWithRelationInput!], skip: Int, take: Int, where: ReadSpeedWhereInput): ReadSpeed
  findFirstReadSpeedOrThrow(cursor: ReadSpeedWhereUniqueInput, distinct: [ReadSpeedScalarFieldEnum!], orderBy: [ReadSpeedOrderByWithRelationInput!], skip: Int, take: Int, where: ReadSpeedWhereInput): ReadSpeed
  findFirstState(cursor: StateWhereUniqueInput, distinct: [StateScalarFieldEnum!], orderBy: [StateOrderByWithRelationInput!], skip: Int, take: Int, where: StateWhereInput): State
  findFirstStateOrThrow(cursor: StateWhereUniqueInput, distinct: [StateScalarFieldEnum!], orderBy: [StateOrderByWithRelationInput!], skip: Int, take: Int, where: StateWhereInput): State
  findFirstTrack(cursor: TrackWhereUniqueInput, distinct: [TrackScalarFieldEnum!], orderBy: [TrackOrderByWithRelationInput!], skip: Int, take: Int, where: TrackWhereInput): Track
  findFirstTrackOrThrow(cursor: TrackWhereUniqueInput, distinct: [TrackScalarFieldEnum!], orderBy: [TrackOrderByWithRelationInput!], skip: Int, take: Int, where: TrackWhereInput): Track
  findFirstVinyl(cursor: VinylWhereUniqueInput, distinct: [VinylScalarFieldEnum!], orderBy: [VinylOrderByWithRelationInput!], skip: Int, take: Int, where: VinylWhereInput): Vinyl
  findFirstVinylOrThrow(cursor: VinylWhereUniqueInput, distinct: [VinylScalarFieldEnum!], orderBy: [VinylOrderByWithRelationInput!], skip: Int, take: Int, where: VinylWhereInput): Vinyl
  getAlbum(where: AlbumWhereUniqueInput!): Album
  getArtist(where: ArtistWhereUniqueInput!): Artist
  getAuthored(where: AuthoredWhereUniqueInput!): Authored
  getBought(where: BoughtWhereUniqueInput!): Bought
  getCredit(where: CreditWhereUniqueInput!): Credit
  getImage(where: ImageWhereUniqueInput!): Image
  getLabel(where: LabelWhereUniqueInput!): Label
  getPlayedBy(where: PlayedByWhereUniqueInput!): PlayedBy
  getPocketState(where: PocketStateWhereUniqueInput!): PocketState
  getReadSpeed(where: ReadSpeedWhereUniqueInput!): ReadSpeed
  getState(where: StateWhereUniqueInput!): State
  getTrack(where: TrackWhereUniqueInput!): Track
  getVinyl(where: VinylWhereUniqueInput!): Vinyl
  groupByAlbum(by: [AlbumScalarFieldEnum!]!, having: AlbumScalarWhereWithAggregatesInput, orderBy: [AlbumOrderByWithAggregationInput!], skip: Int, take: Int, where: AlbumWhereInput): [AlbumGroupBy!]!
  groupByArtist(by: [ArtistScalarFieldEnum!]!, having: ArtistScalarWhereWithAggregatesInput, orderBy: [ArtistOrderByWithAggregationInput!], skip: Int, take: Int, where: ArtistWhereInput): [ArtistGroupBy!]!
  groupByAuthored(by: [AuthoredScalarFieldEnum!]!, having: AuthoredScalarWhereWithAggregatesInput, orderBy: [AuthoredOrderByWithAggregationInput!], skip: Int, take: Int, where: AuthoredWhereInput): [AuthoredGroupBy!]!
  groupByBought(by: [BoughtScalarFieldEnum!]!, having: BoughtScalarWhereWithAggregatesInput, orderBy: [BoughtOrderByWithAggregationInput!], skip: Int, take: Int, where: BoughtWhereInput): [BoughtGroupBy!]!
  groupByCredit(by: [CreditScalarFieldEnum!]!, having: CreditScalarWhereWithAggregatesInput, orderBy: [CreditOrderByWithAggregationInput!], skip: Int, take: Int, where: CreditWhereInput): [CreditGroupBy!]!
  groupByImage(by: [ImageScalarFieldEnum!]!, having: ImageScalarWhereWithAggregatesInput, orderBy: [ImageOrderByWithAggregationInput!], skip: Int, take: Int, where: ImageWhereInput): [ImageGroupBy!]!
  groupByLabel(by: [LabelScalarFieldEnum!]!, having: LabelScalarWhereWithAggregatesInput, orderBy: [LabelOrderByWithAggregationInput!], skip: Int, take: Int, where: LabelWhereInput): [LabelGroupBy!]!
  groupByPlayedBy(by: [PlayedByScalarFieldEnum!]!, having: PlayedByScalarWhereWithAggregatesInput, orderBy: [PlayedByOrderByWithAggregationInput!], skip: Int, take: Int, where: PlayedByWhereInput): [PlayedByGroupBy!]!
  groupByPocketState(by: [PocketStateScalarFieldEnum!]!, having: PocketStateScalarWhereWithAggregatesInput, orderBy: [PocketStateOrderByWithAggregationInput!], skip: Int, take: Int, where: PocketStateWhereInput): [PocketStateGroupBy!]!
  groupByReadSpeed(by: [ReadSpeedScalarFieldEnum!]!, having: ReadSpeedScalarWhereWithAggregatesInput, orderBy: [ReadSpeedOrderByWithAggregationInput!], skip: Int, take: Int, where: ReadSpeedWhereInput): [ReadSpeedGroupBy!]!
  groupByState(by: [StateScalarFieldEnum!]!, having: StateScalarWhereWithAggregatesInput, orderBy: [StateOrderByWithAggregationInput!], skip: Int, take: Int, where: StateWhereInput): [StateGroupBy!]!
  groupByTrack(by: [TrackScalarFieldEnum!]!, having: TrackScalarWhereWithAggregatesInput, orderBy: [TrackOrderByWithAggregationInput!], skip: Int, take: Int, where: TrackWhereInput): [TrackGroupBy!]!
  groupByVinyl(by: [VinylScalarFieldEnum!]!, having: VinylScalarWhereWithAggregatesInput, orderBy: [VinylOrderByWithAggregationInput!], skip: Int, take: Int, where: VinylWhereInput): [VinylGroupBy!]!
  image(where: ImageWhereUniqueInput!): Image
  images(cursor: ImageWhereUniqueInput, distinct: [ImageScalarFieldEnum!], orderBy: [ImageOrderByWithRelationInput!], skip: Int, take: Int, where: ImageWhereInput): [Image!]!
  label(where: LabelWhereUniqueInput!): Label
  labels(cursor: LabelWhereUniqueInput, distinct: [LabelScalarFieldEnum!], orderBy: [LabelOrderByWithRelationInput!], skip: Int, take: Int, where: LabelWhereInput): [Label!]!
  playedBies(cursor: PlayedByWhereUniqueInput, distinct: [PlayedByScalarFieldEnum!], orderBy: [PlayedByOrderByWithRelationInput!], skip: Int, take: Int, where: PlayedByWhereInput): [PlayedBy!]!
  playedBy(where: PlayedByWhereUniqueInput!): PlayedBy
  pocketState(where: PocketStateWhereUniqueInput!): PocketState
  pocketStates(cursor: PocketStateWhereUniqueInput, distinct: [PocketStateScalarFieldEnum!], orderBy: [PocketStateOrderByWithRelationInput!], skip: Int, take: Int, where: PocketStateWhereInput): [PocketState!]!
  readSpeed(where: ReadSpeedWhereUniqueInput!): ReadSpeed
  readSpeeds(cursor: ReadSpeedWhereUniqueInput, distinct: [ReadSpeedScalarFieldEnum!], orderBy: [ReadSpeedOrderByWithRelationInput!], skip: Int, take: Int, where: ReadSpeedWhereInput): [ReadSpeed!]!
  state(where: StateWhereUniqueInput!): State
  states(cursor: StateWhereUniqueInput, distinct: [StateScalarFieldEnum!], orderBy: [StateOrderByWithRelationInput!], skip: Int, take: Int, where: StateWhereInput): [State!]!
  track(where: TrackWhereUniqueInput!): Track
  tracks(cursor: TrackWhereUniqueInput, distinct: [TrackScalarFieldEnum!], orderBy: [TrackOrderByWithRelationInput!], skip: Int, take: Int, where: TrackWhereInput): [Track!]!
  vinyl(where: VinylWhereUniqueInput!): Vinyl
  vinyls(cursor: VinylWhereUniqueInput, distinct: [VinylScalarFieldEnum!], orderBy: [VinylOrderByWithRelationInput!], skip: Int, take: Int, where: VinylWhereInput): [Vinyl!]!
}

type ReadSpeed {
  _count: ReadSpeedCount
  idReadSpeed: String!
  speed: String!
  vinyls(cursor: VinylWhereUniqueInput, distinct: [VinylScalarFieldEnum!], orderBy: [VinylOrderByWithRelationInput!], skip: Int, take: Int, where: VinylWhereInput): [Vinyl!]!
}

type ReadSpeedCount {
  vinyls(where: VinylWhereInput): Int!
}

type ReadSpeedCountAggregate {
  _all: Int!
  idReadSpeed: Int!
  speed: Int!
}

input ReadSpeedCountOrderByAggregateInput {
  idReadSpeed: SortOrder
  speed: SortOrder
}

input ReadSpeedCreateInput {
  idReadSpeed: String
  speed: String!
  vinyls: VinylCreateNestedManyWithoutReadSpeedInput
}

input ReadSpeedCreateManyInput {
  idReadSpeed: String
  speed: String!
}

input ReadSpeedCreateNestedOneWithoutVinylsInput {
  connect: ReadSpeedWhereUniqueInput
  connectOrCreate: ReadSpeedCreateOrConnectWithoutVinylsInput
  create: ReadSpeedCreateWithoutVinylsInput
}

input ReadSpeedCreateOrConnectWithoutVinylsInput {
  create: ReadSpeedCreateWithoutVinylsInput!
  where: ReadSpeedWhereUniqueInput!
}

input ReadSpeedCreateWithoutVinylsInput {
  idReadSpeed: String
  speed: String!
}

type ReadSpeedGroupBy {
  _count: ReadSpeedCountAggregate
  _max: ReadSpeedMaxAggregate
  _min: ReadSpeedMinAggregate
  idReadSpeed: String!
  speed: String!
}

type ReadSpeedMaxAggregate {
  idReadSpeed: String
  speed: String
}

input ReadSpeedMaxOrderByAggregateInput {
  idReadSpeed: SortOrder
  speed: SortOrder
}

type ReadSpeedMinAggregate {
  idReadSpeed: String
  speed: String
}

input ReadSpeedMinOrderByAggregateInput {
  idReadSpeed: SortOrder
  speed: SortOrder
}

input ReadSpeedOrderByWithAggregationInput {
  _count: ReadSpeedCountOrderByAggregateInput
  _max: ReadSpeedMaxOrderByAggregateInput
  _min: ReadSpeedMinOrderByAggregateInput
  idReadSpeed: SortOrder
  speed: SortOrder
}

input ReadSpeedOrderByWithRelationInput {
  idReadSpeed: SortOrder
  speed: SortOrder
  vinyls: VinylOrderByRelationAggregateInput
}

input ReadSpeedRelationFilter {
  is: ReadSpeedWhereInput
  isNot: ReadSpeedWhereInput
}

enum ReadSpeedScalarFieldEnum {
  idReadSpeed
  speed
}

input ReadSpeedScalarWhereWithAggregatesInput {
  AND: [ReadSpeedScalarWhereWithAggregatesInput!]
  NOT: [ReadSpeedScalarWhereWithAggregatesInput!]
  OR: [ReadSpeedScalarWhereWithAggregatesInput!]
  idReadSpeed: StringWithAggregatesFilter
  speed: StringWithAggregatesFilter
}

input ReadSpeedUpdateInput {
  idReadSpeed: StringFieldUpdateOperationsInput
  speed: StringFieldUpdateOperationsInput
  vinyls: VinylUpdateManyWithoutReadSpeedNestedInput
}

input ReadSpeedUpdateManyMutationInput {
  idReadSpeed: StringFieldUpdateOperationsInput
  speed: StringFieldUpdateOperationsInput
}

input ReadSpeedUpdateOneRequiredWithoutVinylsNestedInput {
  connect: ReadSpeedWhereUniqueInput
  connectOrCreate: ReadSpeedCreateOrConnectWithoutVinylsInput
  create: ReadSpeedCreateWithoutVinylsInput
  update: ReadSpeedUpdateToOneWithWhereWithoutVinylsInput
  upsert: ReadSpeedUpsertWithoutVinylsInput
}

input ReadSpeedUpdateToOneWithWhereWithoutVinylsInput {
  data: ReadSpeedUpdateWithoutVinylsInput!
  where: ReadSpeedWhereInput
}

input ReadSpeedUpdateWithoutVinylsInput {
  idReadSpeed: StringFieldUpdateOperationsInput
  speed: StringFieldUpdateOperationsInput
}

input ReadSpeedUpsertWithoutVinylsInput {
  create: ReadSpeedCreateWithoutVinylsInput!
  update: ReadSpeedUpdateWithoutVinylsInput!
  where: ReadSpeedWhereInput
}

input ReadSpeedWhereInput {
  AND: [ReadSpeedWhereInput!]
  NOT: [ReadSpeedWhereInput!]
  OR: [ReadSpeedWhereInput!]
  idReadSpeed: StringFilter
  speed: StringFilter
  vinyls: VinylListRelationFilter
}

input ReadSpeedWhereUniqueInput {
  AND: [ReadSpeedWhereInput!]
  NOT: [ReadSpeedWhereInput!]
  OR: [ReadSpeedWhereInput!]
  idReadSpeed: String
  speed: String
  vinyls: VinylListRelationFilter
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

type State {
  _count: StateCount
  idState: String!
  name: String!
  vinyls(cursor: VinylWhereUniqueInput, distinct: [VinylScalarFieldEnum!], orderBy: [VinylOrderByWithRelationInput!], skip: Int, take: Int, where: VinylWhereInput): [Vinyl!]!
}

type StateCount {
  vinyls(where: VinylWhereInput): Int!
}

type StateCountAggregate {
  _all: Int!
  idState: Int!
  name: Int!
}

input StateCountOrderByAggregateInput {
  idState: SortOrder
  name: SortOrder
}

input StateCreateInput {
  idState: String
  name: String!
  vinyls: VinylCreateNestedManyWithoutStateInput
}

input StateCreateManyInput {
  idState: String
  name: String!
}

input StateCreateNestedOneWithoutVinylsInput {
  connect: StateWhereUniqueInput
  connectOrCreate: StateCreateOrConnectWithoutVinylsInput
  create: StateCreateWithoutVinylsInput
}

input StateCreateOrConnectWithoutVinylsInput {
  create: StateCreateWithoutVinylsInput!
  where: StateWhereUniqueInput!
}

input StateCreateWithoutVinylsInput {
  idState: String
  name: String!
}

type StateGroupBy {
  _count: StateCountAggregate
  _max: StateMaxAggregate
  _min: StateMinAggregate
  idState: String!
  name: String!
}

type StateMaxAggregate {
  idState: String
  name: String
}

input StateMaxOrderByAggregateInput {
  idState: SortOrder
  name: SortOrder
}

type StateMinAggregate {
  idState: String
  name: String
}

input StateMinOrderByAggregateInput {
  idState: SortOrder
  name: SortOrder
}

input StateNullableRelationFilter {
  is: StateWhereInput
  isNot: StateWhereInput
}

input StateOrderByWithAggregationInput {
  _count: StateCountOrderByAggregateInput
  _max: StateMaxOrderByAggregateInput
  _min: StateMinOrderByAggregateInput
  idState: SortOrder
  name: SortOrder
}

input StateOrderByWithRelationInput {
  idState: SortOrder
  name: SortOrder
  vinyls: VinylOrderByRelationAggregateInput
}

enum StateScalarFieldEnum {
  idState
  name
}

input StateScalarWhereWithAggregatesInput {
  AND: [StateScalarWhereWithAggregatesInput!]
  NOT: [StateScalarWhereWithAggregatesInput!]
  OR: [StateScalarWhereWithAggregatesInput!]
  idState: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
}

input StateUpdateInput {
  idState: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  vinyls: VinylUpdateManyWithoutStateNestedInput
}

input StateUpdateManyMutationInput {
  idState: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input StateUpdateOneWithoutVinylsNestedInput {
  connect: StateWhereUniqueInput
  connectOrCreate: StateCreateOrConnectWithoutVinylsInput
  create: StateCreateWithoutVinylsInput
  delete: StateWhereInput
  disconnect: StateWhereInput
  update: StateUpdateToOneWithWhereWithoutVinylsInput
  upsert: StateUpsertWithoutVinylsInput
}

input StateUpdateToOneWithWhereWithoutVinylsInput {
  data: StateUpdateWithoutVinylsInput!
  where: StateWhereInput
}

input StateUpdateWithoutVinylsInput {
  idState: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input StateUpsertWithoutVinylsInput {
  create: StateCreateWithoutVinylsInput!
  update: StateUpdateWithoutVinylsInput!
  where: StateWhereInput
}

input StateWhereInput {
  AND: [StateWhereInput!]
  NOT: [StateWhereInput!]
  OR: [StateWhereInput!]
  idState: StringFilter
  name: StringFilter
  vinyls: VinylListRelationFilter
}

input StateWhereUniqueInput {
  AND: [StateWhereInput!]
  NOT: [StateWhereInput!]
  OR: [StateWhereInput!]
  idState: String
  name: String
  vinyls: VinylListRelationFilter
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Track {
  duration: Int
  idTrack: String!
  idVinyl: String!
  name: String!
  vinyl: Vinyl!
}

type TrackAvgAggregate {
  duration: Float
}

input TrackAvgOrderByAggregateInput {
  duration: SortOrder
}

type TrackCountAggregate {
  _all: Int!
  duration: Int!
  idTrack: Int!
  idVinyl: Int!
  name: Int!
}

input TrackCountOrderByAggregateInput {
  duration: SortOrder
  idTrack: SortOrder
  idVinyl: SortOrder
  name: SortOrder
}

input TrackCreateInput {
  duration: Int
  idTrack: String
  name: String!
  vinyl: VinylCreateNestedOneWithoutTracksInput!
}

input TrackCreateManyInput {
  duration: Int
  idTrack: String
  idVinyl: String!
  name: String!
}

input TrackCreateManyVinylInput {
  duration: Int
  idTrack: String
  name: String!
}

input TrackCreateManyVinylInputEnvelope {
  data: [TrackCreateManyVinylInput!]!
  skipDuplicates: Boolean
}

input TrackCreateNestedManyWithoutVinylInput {
  connect: [TrackWhereUniqueInput!]
  connectOrCreate: [TrackCreateOrConnectWithoutVinylInput!]
  create: [TrackCreateWithoutVinylInput!]
  createMany: TrackCreateManyVinylInputEnvelope
}

input TrackCreateOrConnectWithoutVinylInput {
  create: TrackCreateWithoutVinylInput!
  where: TrackWhereUniqueInput!
}

input TrackCreateWithoutVinylInput {
  duration: Int
  idTrack: String
  name: String!
}

type TrackGroupBy {
  _avg: TrackAvgAggregate
  _count: TrackCountAggregate
  _max: TrackMaxAggregate
  _min: TrackMinAggregate
  _sum: TrackSumAggregate
  duration: Int
  idTrack: String!
  idVinyl: String!
  name: String!
}

input TrackListRelationFilter {
  every: TrackWhereInput
  none: TrackWhereInput
  some: TrackWhereInput
}

type TrackMaxAggregate {
  duration: Int
  idTrack: String
  idVinyl: String
  name: String
}

input TrackMaxOrderByAggregateInput {
  duration: SortOrder
  idTrack: SortOrder
  idVinyl: SortOrder
  name: SortOrder
}

type TrackMinAggregate {
  duration: Int
  idTrack: String
  idVinyl: String
  name: String
}

input TrackMinOrderByAggregateInput {
  duration: SortOrder
  idTrack: SortOrder
  idVinyl: SortOrder
  name: SortOrder
}

input TrackOrderByRelationAggregateInput {
  _count: SortOrder
}

input TrackOrderByWithAggregationInput {
  _avg: TrackAvgOrderByAggregateInput
  _count: TrackCountOrderByAggregateInput
  _max: TrackMaxOrderByAggregateInput
  _min: TrackMinOrderByAggregateInput
  _sum: TrackSumOrderByAggregateInput
  duration: SortOrderInput
  idTrack: SortOrder
  idVinyl: SortOrder
  name: SortOrder
}

input TrackOrderByWithRelationInput {
  duration: SortOrderInput
  idTrack: SortOrder
  idVinyl: SortOrder
  name: SortOrder
  vinyl: VinylOrderByWithRelationInput
}

enum TrackScalarFieldEnum {
  duration
  idTrack
  idVinyl
  name
}

input TrackScalarWhereInput {
  AND: [TrackScalarWhereInput!]
  NOT: [TrackScalarWhereInput!]
  OR: [TrackScalarWhereInput!]
  duration: IntNullableFilter
  idTrack: StringFilter
  idVinyl: StringFilter
  name: StringFilter
}

input TrackScalarWhereWithAggregatesInput {
  AND: [TrackScalarWhereWithAggregatesInput!]
  NOT: [TrackScalarWhereWithAggregatesInput!]
  OR: [TrackScalarWhereWithAggregatesInput!]
  duration: IntNullableWithAggregatesFilter
  idTrack: StringWithAggregatesFilter
  idVinyl: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
}

type TrackSumAggregate {
  duration: Int
}

input TrackSumOrderByAggregateInput {
  duration: SortOrder
}

input TrackUpdateInput {
  duration: NullableIntFieldUpdateOperationsInput
  idTrack: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  vinyl: VinylUpdateOneRequiredWithoutTracksNestedInput
}

input TrackUpdateManyMutationInput {
  duration: NullableIntFieldUpdateOperationsInput
  idTrack: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input TrackUpdateManyWithWhereWithoutVinylInput {
  data: TrackUpdateManyMutationInput!
  where: TrackScalarWhereInput!
}

input TrackUpdateManyWithoutVinylNestedInput {
  connect: [TrackWhereUniqueInput!]
  connectOrCreate: [TrackCreateOrConnectWithoutVinylInput!]
  create: [TrackCreateWithoutVinylInput!]
  createMany: TrackCreateManyVinylInputEnvelope
  delete: [TrackWhereUniqueInput!]
  deleteMany: [TrackScalarWhereInput!]
  disconnect: [TrackWhereUniqueInput!]
  set: [TrackWhereUniqueInput!]
  update: [TrackUpdateWithWhereUniqueWithoutVinylInput!]
  updateMany: [TrackUpdateManyWithWhereWithoutVinylInput!]
  upsert: [TrackUpsertWithWhereUniqueWithoutVinylInput!]
}

input TrackUpdateWithWhereUniqueWithoutVinylInput {
  data: TrackUpdateWithoutVinylInput!
  where: TrackWhereUniqueInput!
}

input TrackUpdateWithoutVinylInput {
  duration: NullableIntFieldUpdateOperationsInput
  idTrack: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input TrackUpsertWithWhereUniqueWithoutVinylInput {
  create: TrackCreateWithoutVinylInput!
  update: TrackUpdateWithoutVinylInput!
  where: TrackWhereUniqueInput!
}

input TrackWhereInput {
  AND: [TrackWhereInput!]
  NOT: [TrackWhereInput!]
  OR: [TrackWhereInput!]
  duration: IntNullableFilter
  idTrack: StringFilter
  idVinyl: StringFilter
  name: StringFilter
  vinyl: VinylRelationFilter
}

input TrackWhereUniqueInput {
  AND: [TrackWhereInput!]
  NOT: [TrackWhereInput!]
  OR: [TrackWhereInput!]
  duration: IntNullableFilter
  idTrack: String
  idVinyl: StringFilter
  name: StringFilter
  vinyl: VinylRelationFilter
}

type Vinyl {
  _count: VinylCount
  album(where: AlbumWhereInput): Album
  authored(cursor: AuthoredWhereUniqueInput, distinct: [AuthoredScalarFieldEnum!], orderBy: [AuthoredOrderByWithRelationInput!], skip: Int, take: Int, where: AuthoredWhereInput): [Authored!]!
  bought(where: BoughtWhereInput): Bought
  catNumber: String!
  credits(cursor: CreditWhereUniqueInput, distinct: [CreditScalarFieldEnum!], orderBy: [CreditOrderByWithRelationInput!], skip: Int, take: Int, where: CreditWhereInput): [Credit!]!
  dateCreated: DateTimeISO!
  dateEdited: DateTimeISO
  dateReleased: DateTimeISO
  edition: String
  idAlbum: String
  idBought: String
  idLabel: String
  idPocketState: String
  idReadSpeed: String!
  idState: String
  idVinyl: String!
  images(cursor: ImageWhereUniqueInput, distinct: [ImageScalarFieldEnum!], orderBy: [ImageOrderByWithRelationInput!], skip: Int, take: Int, where: ImageWhereInput): [Image!]!
  label(where: LabelWhereInput): Label
  notePocket: String
  notes: String
  playedBy(cursor: PlayedByWhereUniqueInput, distinct: [PlayedByScalarFieldEnum!], orderBy: [PlayedByOrderByWithRelationInput!], skip: Int, take: Int, where: PlayedByWhereInput): [PlayedBy!]!
  pocketState(where: PocketStateWhereInput): PocketState
  pressingLoc: String
  rank: Int
  readSpeed: ReadSpeed!
  state(where: StateWhereInput): State
  tracks(cursor: TrackWhereUniqueInput, distinct: [TrackScalarFieldEnum!], orderBy: [TrackOrderByWithRelationInput!], skip: Int, take: Int, where: TrackWhereInput): [Track!]!
  weight: Int
}

type VinylAvgAggregate {
  rank: Float
  weight: Float
}

input VinylAvgOrderByAggregateInput {
  rank: SortOrder
  weight: SortOrder
}

type VinylCount {
  authored(where: AuthoredWhereInput): Int!
  credits(where: CreditWhereInput): Int!
  images(where: ImageWhereInput): Int!
  playedBy(where: PlayedByWhereInput): Int!
  tracks(where: TrackWhereInput): Int!
}

type VinylCountAggregate {
  _all: Int!
  catNumber: Int!
  dateCreated: Int!
  dateEdited: Int!
  dateReleased: Int!
  edition: Int!
  idAlbum: Int!
  idBought: Int!
  idLabel: Int!
  idPocketState: Int!
  idReadSpeed: Int!
  idState: Int!
  idVinyl: Int!
  notePocket: Int!
  notes: Int!
  pressingLoc: Int!
  rank: Int!
  weight: Int!
}

input VinylCountOrderByAggregateInput {
  catNumber: SortOrder
  dateCreated: SortOrder
  dateEdited: SortOrder
  dateReleased: SortOrder
  edition: SortOrder
  idAlbum: SortOrder
  idBought: SortOrder
  idLabel: SortOrder
  idPocketState: SortOrder
  idReadSpeed: SortOrder
  idState: SortOrder
  idVinyl: SortOrder
  notePocket: SortOrder
  notes: SortOrder
  pressingLoc: SortOrder
  rank: SortOrder
  weight: SortOrder
}

input VinylCreateInput {
  album: AlbumCreateNestedOneWithoutVinylsInput
  authored: AuthoredCreateNestedManyWithoutVinylInput
  bought: BoughtCreateNestedOneWithoutVinylsInput
  catNumber: String!
  credits: CreditCreateNestedManyWithoutVinylInput
  dateCreated: DateTimeISO
  dateEdited: DateTimeISO
  dateReleased: DateTimeISO
  edition: String
  idVinyl: String
  images: ImageCreateNestedManyWithoutVinylInput
  label: LabelCreateNestedOneWithoutVinylsInput
  notePocket: String
  notes: String
  playedBy: PlayedByCreateNestedManyWithoutVinylInput
  pocketState: PocketStateCreateNestedOneWithoutVinylsInput
  pressingLoc: String
  rank: Int
  readSpeed: ReadSpeedCreateNestedOneWithoutVinylsInput!
  state: StateCreateNestedOneWithoutVinylsInput
  tracks: TrackCreateNestedManyWithoutVinylInput
  weight: Int
}

input VinylCreateManyAlbumInput {
  catNumber: String!
  dateCreated: DateTimeISO
  dateEdited: DateTimeISO
  dateReleased: DateTimeISO
  edition: String
  idBought: String
  idLabel: String
  idPocketState: String
  idReadSpeed: String!
  idState: String
  idVinyl: String
  notePocket: String
  notes: String
  pressingLoc: String
  rank: Int
  weight: Int
}

input VinylCreateManyAlbumInputEnvelope {
  data: [VinylCreateManyAlbumInput!]!
  skipDuplicates: Boolean
}

input VinylCreateManyBoughtInput {
  catNumber: String!
  dateCreated: DateTimeISO
  dateEdited: DateTimeISO
  dateReleased: DateTimeISO
  edition: String
  idAlbum: String
  idLabel: String
  idPocketState: String
  idReadSpeed: String!
  idState: String
  idVinyl: String
  notePocket: String
  notes: String
  pressingLoc: String
  rank: Int
  weight: Int
}

input VinylCreateManyBoughtInputEnvelope {
  data: [VinylCreateManyBoughtInput!]!
  skipDuplicates: Boolean
}

input VinylCreateManyInput {
  catNumber: String!
  dateCreated: DateTimeISO
  dateEdited: DateTimeISO
  dateReleased: DateTimeISO
  edition: String
  idAlbum: String
  idBought: String
  idLabel: String
  idPocketState: String
  idReadSpeed: String!
  idState: String
  idVinyl: String
  notePocket: String
  notes: String
  pressingLoc: String
  rank: Int
  weight: Int
}

input VinylCreateManyLabelInput {
  catNumber: String!
  dateCreated: DateTimeISO
  dateEdited: DateTimeISO
  dateReleased: DateTimeISO
  edition: String
  idAlbum: String
  idBought: String
  idPocketState: String
  idReadSpeed: String!
  idState: String
  idVinyl: String
  notePocket: String
  notes: String
  pressingLoc: String
  rank: Int
  weight: Int
}

input VinylCreateManyLabelInputEnvelope {
  data: [VinylCreateManyLabelInput!]!
  skipDuplicates: Boolean
}

input VinylCreateManyPocketStateInput {
  catNumber: String!
  dateCreated: DateTimeISO
  dateEdited: DateTimeISO
  dateReleased: DateTimeISO
  edition: String
  idAlbum: String
  idBought: String
  idLabel: String
  idReadSpeed: String!
  idState: String
  idVinyl: String
  notePocket: String
  notes: String
  pressingLoc: String
  rank: Int
  weight: Int
}

input VinylCreateManyPocketStateInputEnvelope {
  data: [VinylCreateManyPocketStateInput!]!
  skipDuplicates: Boolean
}

input VinylCreateManyReadSpeedInput {
  catNumber: String!
  dateCreated: DateTimeISO
  dateEdited: DateTimeISO
  dateReleased: DateTimeISO
  edition: String
  idAlbum: String
  idBought: String
  idLabel: String
  idPocketState: String
  idState: String
  idVinyl: String
  notePocket: String
  notes: String
  pressingLoc: String
  rank: Int
  weight: Int
}

input VinylCreateManyReadSpeedInputEnvelope {
  data: [VinylCreateManyReadSpeedInput!]!
  skipDuplicates: Boolean
}

input VinylCreateManyStateInput {
  catNumber: String!
  dateCreated: DateTimeISO
  dateEdited: DateTimeISO
  dateReleased: DateTimeISO
  edition: String
  idAlbum: String
  idBought: String
  idLabel: String
  idPocketState: String
  idReadSpeed: String!
  idVinyl: String
  notePocket: String
  notes: String
  pressingLoc: String
  rank: Int
  weight: Int
}

input VinylCreateManyStateInputEnvelope {
  data: [VinylCreateManyStateInput!]!
  skipDuplicates: Boolean
}

input VinylCreateNestedManyWithoutAlbumInput {
  connect: [VinylWhereUniqueInput!]
  connectOrCreate: [VinylCreateOrConnectWithoutAlbumInput!]
  create: [VinylCreateWithoutAlbumInput!]
  createMany: VinylCreateManyAlbumInputEnvelope
}

input VinylCreateNestedManyWithoutBoughtInput {
  connect: [VinylWhereUniqueInput!]
  connectOrCreate: [VinylCreateOrConnectWithoutBoughtInput!]
  create: [VinylCreateWithoutBoughtInput!]
  createMany: VinylCreateManyBoughtInputEnvelope
}

input VinylCreateNestedManyWithoutLabelInput {
  connect: [VinylWhereUniqueInput!]
  connectOrCreate: [VinylCreateOrConnectWithoutLabelInput!]
  create: [VinylCreateWithoutLabelInput!]
  createMany: VinylCreateManyLabelInputEnvelope
}

input VinylCreateNestedManyWithoutPocketStateInput {
  connect: [VinylWhereUniqueInput!]
  connectOrCreate: [VinylCreateOrConnectWithoutPocketStateInput!]
  create: [VinylCreateWithoutPocketStateInput!]
  createMany: VinylCreateManyPocketStateInputEnvelope
}

input VinylCreateNestedManyWithoutReadSpeedInput {
  connect: [VinylWhereUniqueInput!]
  connectOrCreate: [VinylCreateOrConnectWithoutReadSpeedInput!]
  create: [VinylCreateWithoutReadSpeedInput!]
  createMany: VinylCreateManyReadSpeedInputEnvelope
}

input VinylCreateNestedManyWithoutStateInput {
  connect: [VinylWhereUniqueInput!]
  connectOrCreate: [VinylCreateOrConnectWithoutStateInput!]
  create: [VinylCreateWithoutStateInput!]
  createMany: VinylCreateManyStateInputEnvelope
}

input VinylCreateNestedOneWithoutAuthoredInput {
  connect: VinylWhereUniqueInput
  connectOrCreate: VinylCreateOrConnectWithoutAuthoredInput
  create: VinylCreateWithoutAuthoredInput
}

input VinylCreateNestedOneWithoutCreditsInput {
  connect: VinylWhereUniqueInput
  connectOrCreate: VinylCreateOrConnectWithoutCreditsInput
  create: VinylCreateWithoutCreditsInput
}

input VinylCreateNestedOneWithoutImagesInput {
  connect: VinylWhereUniqueInput
  connectOrCreate: VinylCreateOrConnectWithoutImagesInput
  create: VinylCreateWithoutImagesInput
}

input VinylCreateNestedOneWithoutPlayedByInput {
  connect: VinylWhereUniqueInput
  connectOrCreate: VinylCreateOrConnectWithoutPlayedByInput
  create: VinylCreateWithoutPlayedByInput
}

input VinylCreateNestedOneWithoutTracksInput {
  connect: VinylWhereUniqueInput
  connectOrCreate: VinylCreateOrConnectWithoutTracksInput
  create: VinylCreateWithoutTracksInput
}

input VinylCreateOrConnectWithoutAlbumInput {
  create: VinylCreateWithoutAlbumInput!
  where: VinylWhereUniqueInput!
}

input VinylCreateOrConnectWithoutAuthoredInput {
  create: VinylCreateWithoutAuthoredInput!
  where: VinylWhereUniqueInput!
}

input VinylCreateOrConnectWithoutBoughtInput {
  create: VinylCreateWithoutBoughtInput!
  where: VinylWhereUniqueInput!
}

input VinylCreateOrConnectWithoutCreditsInput {
  create: VinylCreateWithoutCreditsInput!
  where: VinylWhereUniqueInput!
}

input VinylCreateOrConnectWithoutImagesInput {
  create: VinylCreateWithoutImagesInput!
  where: VinylWhereUniqueInput!
}

input VinylCreateOrConnectWithoutLabelInput {
  create: VinylCreateWithoutLabelInput!
  where: VinylWhereUniqueInput!
}

input VinylCreateOrConnectWithoutPlayedByInput {
  create: VinylCreateWithoutPlayedByInput!
  where: VinylWhereUniqueInput!
}

input VinylCreateOrConnectWithoutPocketStateInput {
  create: VinylCreateWithoutPocketStateInput!
  where: VinylWhereUniqueInput!
}

input VinylCreateOrConnectWithoutReadSpeedInput {
  create: VinylCreateWithoutReadSpeedInput!
  where: VinylWhereUniqueInput!
}

input VinylCreateOrConnectWithoutStateInput {
  create: VinylCreateWithoutStateInput!
  where: VinylWhereUniqueInput!
}

input VinylCreateOrConnectWithoutTracksInput {
  create: VinylCreateWithoutTracksInput!
  where: VinylWhereUniqueInput!
}

input VinylCreateWithoutAlbumInput {
  authored: AuthoredCreateNestedManyWithoutVinylInput
  bought: BoughtCreateNestedOneWithoutVinylsInput
  catNumber: String!
  credits: CreditCreateNestedManyWithoutVinylInput
  dateCreated: DateTimeISO
  dateEdited: DateTimeISO
  dateReleased: DateTimeISO
  edition: String
  idVinyl: String
  images: ImageCreateNestedManyWithoutVinylInput
  label: LabelCreateNestedOneWithoutVinylsInput
  notePocket: String
  notes: String
  playedBy: PlayedByCreateNestedManyWithoutVinylInput
  pocketState: PocketStateCreateNestedOneWithoutVinylsInput
  pressingLoc: String
  rank: Int
  readSpeed: ReadSpeedCreateNestedOneWithoutVinylsInput!
  state: StateCreateNestedOneWithoutVinylsInput
  tracks: TrackCreateNestedManyWithoutVinylInput
  weight: Int
}

input VinylCreateWithoutAuthoredInput {
  album: AlbumCreateNestedOneWithoutVinylsInput
  bought: BoughtCreateNestedOneWithoutVinylsInput
  catNumber: String!
  credits: CreditCreateNestedManyWithoutVinylInput
  dateCreated: DateTimeISO
  dateEdited: DateTimeISO
  dateReleased: DateTimeISO
  edition: String
  idVinyl: String
  images: ImageCreateNestedManyWithoutVinylInput
  label: LabelCreateNestedOneWithoutVinylsInput
  notePocket: String
  notes: String
  playedBy: PlayedByCreateNestedManyWithoutVinylInput
  pocketState: PocketStateCreateNestedOneWithoutVinylsInput
  pressingLoc: String
  rank: Int
  readSpeed: ReadSpeedCreateNestedOneWithoutVinylsInput!
  state: StateCreateNestedOneWithoutVinylsInput
  tracks: TrackCreateNestedManyWithoutVinylInput
  weight: Int
}

input VinylCreateWithoutBoughtInput {
  album: AlbumCreateNestedOneWithoutVinylsInput
  authored: AuthoredCreateNestedManyWithoutVinylInput
  catNumber: String!
  credits: CreditCreateNestedManyWithoutVinylInput
  dateCreated: DateTimeISO
  dateEdited: DateTimeISO
  dateReleased: DateTimeISO
  edition: String
  idVinyl: String
  images: ImageCreateNestedManyWithoutVinylInput
  label: LabelCreateNestedOneWithoutVinylsInput
  notePocket: String
  notes: String
  playedBy: PlayedByCreateNestedManyWithoutVinylInput
  pocketState: PocketStateCreateNestedOneWithoutVinylsInput
  pressingLoc: String
  rank: Int
  readSpeed: ReadSpeedCreateNestedOneWithoutVinylsInput!
  state: StateCreateNestedOneWithoutVinylsInput
  tracks: TrackCreateNestedManyWithoutVinylInput
  weight: Int
}

input VinylCreateWithoutCreditsInput {
  album: AlbumCreateNestedOneWithoutVinylsInput
  authored: AuthoredCreateNestedManyWithoutVinylInput
  bought: BoughtCreateNestedOneWithoutVinylsInput
  catNumber: String!
  dateCreated: DateTimeISO
  dateEdited: DateTimeISO
  dateReleased: DateTimeISO
  edition: String
  idVinyl: String
  images: ImageCreateNestedManyWithoutVinylInput
  label: LabelCreateNestedOneWithoutVinylsInput
  notePocket: String
  notes: String
  playedBy: PlayedByCreateNestedManyWithoutVinylInput
  pocketState: PocketStateCreateNestedOneWithoutVinylsInput
  pressingLoc: String
  rank: Int
  readSpeed: ReadSpeedCreateNestedOneWithoutVinylsInput!
  state: StateCreateNestedOneWithoutVinylsInput
  tracks: TrackCreateNestedManyWithoutVinylInput
  weight: Int
}

input VinylCreateWithoutImagesInput {
  album: AlbumCreateNestedOneWithoutVinylsInput
  authored: AuthoredCreateNestedManyWithoutVinylInput
  bought: BoughtCreateNestedOneWithoutVinylsInput
  catNumber: String!
  credits: CreditCreateNestedManyWithoutVinylInput
  dateCreated: DateTimeISO
  dateEdited: DateTimeISO
  dateReleased: DateTimeISO
  edition: String
  idVinyl: String
  label: LabelCreateNestedOneWithoutVinylsInput
  notePocket: String
  notes: String
  playedBy: PlayedByCreateNestedManyWithoutVinylInput
  pocketState: PocketStateCreateNestedOneWithoutVinylsInput
  pressingLoc: String
  rank: Int
  readSpeed: ReadSpeedCreateNestedOneWithoutVinylsInput!
  state: StateCreateNestedOneWithoutVinylsInput
  tracks: TrackCreateNestedManyWithoutVinylInput
  weight: Int
}

input VinylCreateWithoutLabelInput {
  album: AlbumCreateNestedOneWithoutVinylsInput
  authored: AuthoredCreateNestedManyWithoutVinylInput
  bought: BoughtCreateNestedOneWithoutVinylsInput
  catNumber: String!
  credits: CreditCreateNestedManyWithoutVinylInput
  dateCreated: DateTimeISO
  dateEdited: DateTimeISO
  dateReleased: DateTimeISO
  edition: String
  idVinyl: String
  images: ImageCreateNestedManyWithoutVinylInput
  notePocket: String
  notes: String
  playedBy: PlayedByCreateNestedManyWithoutVinylInput
  pocketState: PocketStateCreateNestedOneWithoutVinylsInput
  pressingLoc: String
  rank: Int
  readSpeed: ReadSpeedCreateNestedOneWithoutVinylsInput!
  state: StateCreateNestedOneWithoutVinylsInput
  tracks: TrackCreateNestedManyWithoutVinylInput
  weight: Int
}

input VinylCreateWithoutPlayedByInput {
  album: AlbumCreateNestedOneWithoutVinylsInput
  authored: AuthoredCreateNestedManyWithoutVinylInput
  bought: BoughtCreateNestedOneWithoutVinylsInput
  catNumber: String!
  credits: CreditCreateNestedManyWithoutVinylInput
  dateCreated: DateTimeISO
  dateEdited: DateTimeISO
  dateReleased: DateTimeISO
  edition: String
  idVinyl: String
  images: ImageCreateNestedManyWithoutVinylInput
  label: LabelCreateNestedOneWithoutVinylsInput
  notePocket: String
  notes: String
  pocketState: PocketStateCreateNestedOneWithoutVinylsInput
  pressingLoc: String
  rank: Int
  readSpeed: ReadSpeedCreateNestedOneWithoutVinylsInput!
  state: StateCreateNestedOneWithoutVinylsInput
  tracks: TrackCreateNestedManyWithoutVinylInput
  weight: Int
}

input VinylCreateWithoutPocketStateInput {
  album: AlbumCreateNestedOneWithoutVinylsInput
  authored: AuthoredCreateNestedManyWithoutVinylInput
  bought: BoughtCreateNestedOneWithoutVinylsInput
  catNumber: String!
  credits: CreditCreateNestedManyWithoutVinylInput
  dateCreated: DateTimeISO
  dateEdited: DateTimeISO
  dateReleased: DateTimeISO
  edition: String
  idVinyl: String
  images: ImageCreateNestedManyWithoutVinylInput
  label: LabelCreateNestedOneWithoutVinylsInput
  notePocket: String
  notes: String
  playedBy: PlayedByCreateNestedManyWithoutVinylInput
  pressingLoc: String
  rank: Int
  readSpeed: ReadSpeedCreateNestedOneWithoutVinylsInput!
  state: StateCreateNestedOneWithoutVinylsInput
  tracks: TrackCreateNestedManyWithoutVinylInput
  weight: Int
}

input VinylCreateWithoutReadSpeedInput {
  album: AlbumCreateNestedOneWithoutVinylsInput
  authored: AuthoredCreateNestedManyWithoutVinylInput
  bought: BoughtCreateNestedOneWithoutVinylsInput
  catNumber: String!
  credits: CreditCreateNestedManyWithoutVinylInput
  dateCreated: DateTimeISO
  dateEdited: DateTimeISO
  dateReleased: DateTimeISO
  edition: String
  idVinyl: String
  images: ImageCreateNestedManyWithoutVinylInput
  label: LabelCreateNestedOneWithoutVinylsInput
  notePocket: String
  notes: String
  playedBy: PlayedByCreateNestedManyWithoutVinylInput
  pocketState: PocketStateCreateNestedOneWithoutVinylsInput
  pressingLoc: String
  rank: Int
  state: StateCreateNestedOneWithoutVinylsInput
  tracks: TrackCreateNestedManyWithoutVinylInput
  weight: Int
}

input VinylCreateWithoutStateInput {
  album: AlbumCreateNestedOneWithoutVinylsInput
  authored: AuthoredCreateNestedManyWithoutVinylInput
  bought: BoughtCreateNestedOneWithoutVinylsInput
  catNumber: String!
  credits: CreditCreateNestedManyWithoutVinylInput
  dateCreated: DateTimeISO
  dateEdited: DateTimeISO
  dateReleased: DateTimeISO
  edition: String
  idVinyl: String
  images: ImageCreateNestedManyWithoutVinylInput
  label: LabelCreateNestedOneWithoutVinylsInput
  notePocket: String
  notes: String
  playedBy: PlayedByCreateNestedManyWithoutVinylInput
  pocketState: PocketStateCreateNestedOneWithoutVinylsInput
  pressingLoc: String
  rank: Int
  readSpeed: ReadSpeedCreateNestedOneWithoutVinylsInput!
  tracks: TrackCreateNestedManyWithoutVinylInput
  weight: Int
}

input VinylCreateWithoutTracksInput {
  album: AlbumCreateNestedOneWithoutVinylsInput
  authored: AuthoredCreateNestedManyWithoutVinylInput
  bought: BoughtCreateNestedOneWithoutVinylsInput
  catNumber: String!
  credits: CreditCreateNestedManyWithoutVinylInput
  dateCreated: DateTimeISO
  dateEdited: DateTimeISO
  dateReleased: DateTimeISO
  edition: String
  idVinyl: String
  images: ImageCreateNestedManyWithoutVinylInput
  label: LabelCreateNestedOneWithoutVinylsInput
  notePocket: String
  notes: String
  playedBy: PlayedByCreateNestedManyWithoutVinylInput
  pocketState: PocketStateCreateNestedOneWithoutVinylsInput
  pressingLoc: String
  rank: Int
  readSpeed: ReadSpeedCreateNestedOneWithoutVinylsInput!
  state: StateCreateNestedOneWithoutVinylsInput
  weight: Int
}

type VinylGroupBy {
  _avg: VinylAvgAggregate
  _count: VinylCountAggregate
  _max: VinylMaxAggregate
  _min: VinylMinAggregate
  _sum: VinylSumAggregate
  catNumber: String!
  dateCreated: DateTimeISO!
  dateEdited: DateTimeISO
  dateReleased: DateTimeISO
  edition: String
  idAlbum: String
  idBought: String
  idLabel: String
  idPocketState: String
  idReadSpeed: String!
  idState: String
  idVinyl: String!
  notePocket: String
  notes: String
  pressingLoc: String
  rank: Int
  weight: Int
}

input VinylListRelationFilter {
  every: VinylWhereInput
  none: VinylWhereInput
  some: VinylWhereInput
}

type VinylMaxAggregate {
  catNumber: String
  dateCreated: DateTimeISO
  dateEdited: DateTimeISO
  dateReleased: DateTimeISO
  edition: String
  idAlbum: String
  idBought: String
  idLabel: String
  idPocketState: String
  idReadSpeed: String
  idState: String
  idVinyl: String
  notePocket: String
  notes: String
  pressingLoc: String
  rank: Int
  weight: Int
}

input VinylMaxOrderByAggregateInput {
  catNumber: SortOrder
  dateCreated: SortOrder
  dateEdited: SortOrder
  dateReleased: SortOrder
  edition: SortOrder
  idAlbum: SortOrder
  idBought: SortOrder
  idLabel: SortOrder
  idPocketState: SortOrder
  idReadSpeed: SortOrder
  idState: SortOrder
  idVinyl: SortOrder
  notePocket: SortOrder
  notes: SortOrder
  pressingLoc: SortOrder
  rank: SortOrder
  weight: SortOrder
}

type VinylMinAggregate {
  catNumber: String
  dateCreated: DateTimeISO
  dateEdited: DateTimeISO
  dateReleased: DateTimeISO
  edition: String
  idAlbum: String
  idBought: String
  idLabel: String
  idPocketState: String
  idReadSpeed: String
  idState: String
  idVinyl: String
  notePocket: String
  notes: String
  pressingLoc: String
  rank: Int
  weight: Int
}

input VinylMinOrderByAggregateInput {
  catNumber: SortOrder
  dateCreated: SortOrder
  dateEdited: SortOrder
  dateReleased: SortOrder
  edition: SortOrder
  idAlbum: SortOrder
  idBought: SortOrder
  idLabel: SortOrder
  idPocketState: SortOrder
  idReadSpeed: SortOrder
  idState: SortOrder
  idVinyl: SortOrder
  notePocket: SortOrder
  notes: SortOrder
  pressingLoc: SortOrder
  rank: SortOrder
  weight: SortOrder
}

input VinylOrderByRelationAggregateInput {
  _count: SortOrder
}

input VinylOrderByWithAggregationInput {
  _avg: VinylAvgOrderByAggregateInput
  _count: VinylCountOrderByAggregateInput
  _max: VinylMaxOrderByAggregateInput
  _min: VinylMinOrderByAggregateInput
  _sum: VinylSumOrderByAggregateInput
  catNumber: SortOrder
  dateCreated: SortOrder
  dateEdited: SortOrderInput
  dateReleased: SortOrderInput
  edition: SortOrderInput
  idAlbum: SortOrderInput
  idBought: SortOrderInput
  idLabel: SortOrderInput
  idPocketState: SortOrderInput
  idReadSpeed: SortOrder
  idState: SortOrderInput
  idVinyl: SortOrder
  notePocket: SortOrderInput
  notes: SortOrderInput
  pressingLoc: SortOrderInput
  rank: SortOrderInput
  weight: SortOrderInput
}

input VinylOrderByWithRelationInput {
  album: AlbumOrderByWithRelationInput
  authored: AuthoredOrderByRelationAggregateInput
  bought: BoughtOrderByWithRelationInput
  catNumber: SortOrder
  credits: CreditOrderByRelationAggregateInput
  dateCreated: SortOrder
  dateEdited: SortOrderInput
  dateReleased: SortOrderInput
  edition: SortOrderInput
  idAlbum: SortOrderInput
  idBought: SortOrderInput
  idLabel: SortOrderInput
  idPocketState: SortOrderInput
  idReadSpeed: SortOrder
  idState: SortOrderInput
  idVinyl: SortOrder
  images: ImageOrderByRelationAggregateInput
  label: LabelOrderByWithRelationInput
  notePocket: SortOrderInput
  notes: SortOrderInput
  playedBy: PlayedByOrderByRelationAggregateInput
  pocketState: PocketStateOrderByWithRelationInput
  pressingLoc: SortOrderInput
  rank: SortOrderInput
  readSpeed: ReadSpeedOrderByWithRelationInput
  state: StateOrderByWithRelationInput
  tracks: TrackOrderByRelationAggregateInput
  weight: SortOrderInput
}

input VinylRelationFilter {
  is: VinylWhereInput
  isNot: VinylWhereInput
}

enum VinylScalarFieldEnum {
  catNumber
  dateCreated
  dateEdited
  dateReleased
  edition
  idAlbum
  idBought
  idLabel
  idPocketState
  idReadSpeed
  idState
  idVinyl
  notePocket
  notes
  pressingLoc
  rank
  weight
}

input VinylScalarWhereInput {
  AND: [VinylScalarWhereInput!]
  NOT: [VinylScalarWhereInput!]
  OR: [VinylScalarWhereInput!]
  catNumber: StringFilter
  dateCreated: DateTimeFilter
  dateEdited: DateTimeNullableFilter
  dateReleased: DateTimeNullableFilter
  edition: StringNullableFilter
  idAlbum: StringNullableFilter
  idBought: StringNullableFilter
  idLabel: StringNullableFilter
  idPocketState: StringNullableFilter
  idReadSpeed: StringFilter
  idState: StringNullableFilter
  idVinyl: StringFilter
  notePocket: StringNullableFilter
  notes: StringNullableFilter
  pressingLoc: StringNullableFilter
  rank: IntNullableFilter
  weight: IntNullableFilter
}

input VinylScalarWhereWithAggregatesInput {
  AND: [VinylScalarWhereWithAggregatesInput!]
  NOT: [VinylScalarWhereWithAggregatesInput!]
  OR: [VinylScalarWhereWithAggregatesInput!]
  catNumber: StringWithAggregatesFilter
  dateCreated: DateTimeWithAggregatesFilter
  dateEdited: DateTimeNullableWithAggregatesFilter
  dateReleased: DateTimeNullableWithAggregatesFilter
  edition: StringNullableWithAggregatesFilter
  idAlbum: StringNullableWithAggregatesFilter
  idBought: StringNullableWithAggregatesFilter
  idLabel: StringNullableWithAggregatesFilter
  idPocketState: StringNullableWithAggregatesFilter
  idReadSpeed: StringWithAggregatesFilter
  idState: StringNullableWithAggregatesFilter
  idVinyl: StringWithAggregatesFilter
  notePocket: StringNullableWithAggregatesFilter
  notes: StringNullableWithAggregatesFilter
  pressingLoc: StringNullableWithAggregatesFilter
  rank: IntNullableWithAggregatesFilter
  weight: IntNullableWithAggregatesFilter
}

type VinylSumAggregate {
  rank: Int
  weight: Int
}

input VinylSumOrderByAggregateInput {
  rank: SortOrder
  weight: SortOrder
}

input VinylUpdateInput {
  album: AlbumUpdateOneWithoutVinylsNestedInput
  authored: AuthoredUpdateManyWithoutVinylNestedInput
  bought: BoughtUpdateOneWithoutVinylsNestedInput
  catNumber: StringFieldUpdateOperationsInput
  credits: CreditUpdateManyWithoutVinylNestedInput
  dateCreated: DateTimeFieldUpdateOperationsInput
  dateEdited: NullableDateTimeFieldUpdateOperationsInput
  dateReleased: NullableDateTimeFieldUpdateOperationsInput
  edition: NullableStringFieldUpdateOperationsInput
  idVinyl: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutVinylNestedInput
  label: LabelUpdateOneWithoutVinylsNestedInput
  notePocket: NullableStringFieldUpdateOperationsInput
  notes: NullableStringFieldUpdateOperationsInput
  playedBy: PlayedByUpdateManyWithoutVinylNestedInput
  pocketState: PocketStateUpdateOneWithoutVinylsNestedInput
  pressingLoc: NullableStringFieldUpdateOperationsInput
  rank: NullableIntFieldUpdateOperationsInput
  readSpeed: ReadSpeedUpdateOneRequiredWithoutVinylsNestedInput
  state: StateUpdateOneWithoutVinylsNestedInput
  tracks: TrackUpdateManyWithoutVinylNestedInput
  weight: NullableIntFieldUpdateOperationsInput
}

input VinylUpdateManyMutationInput {
  catNumber: StringFieldUpdateOperationsInput
  dateCreated: DateTimeFieldUpdateOperationsInput
  dateEdited: NullableDateTimeFieldUpdateOperationsInput
  dateReleased: NullableDateTimeFieldUpdateOperationsInput
  edition: NullableStringFieldUpdateOperationsInput
  idVinyl: StringFieldUpdateOperationsInput
  notePocket: NullableStringFieldUpdateOperationsInput
  notes: NullableStringFieldUpdateOperationsInput
  pressingLoc: NullableStringFieldUpdateOperationsInput
  rank: NullableIntFieldUpdateOperationsInput
  weight: NullableIntFieldUpdateOperationsInput
}

input VinylUpdateManyWithWhereWithoutAlbumInput {
  data: VinylUpdateManyMutationInput!
  where: VinylScalarWhereInput!
}

input VinylUpdateManyWithWhereWithoutBoughtInput {
  data: VinylUpdateManyMutationInput!
  where: VinylScalarWhereInput!
}

input VinylUpdateManyWithWhereWithoutLabelInput {
  data: VinylUpdateManyMutationInput!
  where: VinylScalarWhereInput!
}

input VinylUpdateManyWithWhereWithoutPocketStateInput {
  data: VinylUpdateManyMutationInput!
  where: VinylScalarWhereInput!
}

input VinylUpdateManyWithWhereWithoutReadSpeedInput {
  data: VinylUpdateManyMutationInput!
  where: VinylScalarWhereInput!
}

input VinylUpdateManyWithWhereWithoutStateInput {
  data: VinylUpdateManyMutationInput!
  where: VinylScalarWhereInput!
}

input VinylUpdateManyWithoutAlbumNestedInput {
  connect: [VinylWhereUniqueInput!]
  connectOrCreate: [VinylCreateOrConnectWithoutAlbumInput!]
  create: [VinylCreateWithoutAlbumInput!]
  createMany: VinylCreateManyAlbumInputEnvelope
  delete: [VinylWhereUniqueInput!]
  deleteMany: [VinylScalarWhereInput!]
  disconnect: [VinylWhereUniqueInput!]
  set: [VinylWhereUniqueInput!]
  update: [VinylUpdateWithWhereUniqueWithoutAlbumInput!]
  updateMany: [VinylUpdateManyWithWhereWithoutAlbumInput!]
  upsert: [VinylUpsertWithWhereUniqueWithoutAlbumInput!]
}

input VinylUpdateManyWithoutBoughtNestedInput {
  connect: [VinylWhereUniqueInput!]
  connectOrCreate: [VinylCreateOrConnectWithoutBoughtInput!]
  create: [VinylCreateWithoutBoughtInput!]
  createMany: VinylCreateManyBoughtInputEnvelope
  delete: [VinylWhereUniqueInput!]
  deleteMany: [VinylScalarWhereInput!]
  disconnect: [VinylWhereUniqueInput!]
  set: [VinylWhereUniqueInput!]
  update: [VinylUpdateWithWhereUniqueWithoutBoughtInput!]
  updateMany: [VinylUpdateManyWithWhereWithoutBoughtInput!]
  upsert: [VinylUpsertWithWhereUniqueWithoutBoughtInput!]
}

input VinylUpdateManyWithoutLabelNestedInput {
  connect: [VinylWhereUniqueInput!]
  connectOrCreate: [VinylCreateOrConnectWithoutLabelInput!]
  create: [VinylCreateWithoutLabelInput!]
  createMany: VinylCreateManyLabelInputEnvelope
  delete: [VinylWhereUniqueInput!]
  deleteMany: [VinylScalarWhereInput!]
  disconnect: [VinylWhereUniqueInput!]
  set: [VinylWhereUniqueInput!]
  update: [VinylUpdateWithWhereUniqueWithoutLabelInput!]
  updateMany: [VinylUpdateManyWithWhereWithoutLabelInput!]
  upsert: [VinylUpsertWithWhereUniqueWithoutLabelInput!]
}

input VinylUpdateManyWithoutPocketStateNestedInput {
  connect: [VinylWhereUniqueInput!]
  connectOrCreate: [VinylCreateOrConnectWithoutPocketStateInput!]
  create: [VinylCreateWithoutPocketStateInput!]
  createMany: VinylCreateManyPocketStateInputEnvelope
  delete: [VinylWhereUniqueInput!]
  deleteMany: [VinylScalarWhereInput!]
  disconnect: [VinylWhereUniqueInput!]
  set: [VinylWhereUniqueInput!]
  update: [VinylUpdateWithWhereUniqueWithoutPocketStateInput!]
  updateMany: [VinylUpdateManyWithWhereWithoutPocketStateInput!]
  upsert: [VinylUpsertWithWhereUniqueWithoutPocketStateInput!]
}

input VinylUpdateManyWithoutReadSpeedNestedInput {
  connect: [VinylWhereUniqueInput!]
  connectOrCreate: [VinylCreateOrConnectWithoutReadSpeedInput!]
  create: [VinylCreateWithoutReadSpeedInput!]
  createMany: VinylCreateManyReadSpeedInputEnvelope
  delete: [VinylWhereUniqueInput!]
  deleteMany: [VinylScalarWhereInput!]
  disconnect: [VinylWhereUniqueInput!]
  set: [VinylWhereUniqueInput!]
  update: [VinylUpdateWithWhereUniqueWithoutReadSpeedInput!]
  updateMany: [VinylUpdateManyWithWhereWithoutReadSpeedInput!]
  upsert: [VinylUpsertWithWhereUniqueWithoutReadSpeedInput!]
}

input VinylUpdateManyWithoutStateNestedInput {
  connect: [VinylWhereUniqueInput!]
  connectOrCreate: [VinylCreateOrConnectWithoutStateInput!]
  create: [VinylCreateWithoutStateInput!]
  createMany: VinylCreateManyStateInputEnvelope
  delete: [VinylWhereUniqueInput!]
  deleteMany: [VinylScalarWhereInput!]
  disconnect: [VinylWhereUniqueInput!]
  set: [VinylWhereUniqueInput!]
  update: [VinylUpdateWithWhereUniqueWithoutStateInput!]
  updateMany: [VinylUpdateManyWithWhereWithoutStateInput!]
  upsert: [VinylUpsertWithWhereUniqueWithoutStateInput!]
}

input VinylUpdateOneRequiredWithoutAuthoredNestedInput {
  connect: VinylWhereUniqueInput
  connectOrCreate: VinylCreateOrConnectWithoutAuthoredInput
  create: VinylCreateWithoutAuthoredInput
  update: VinylUpdateToOneWithWhereWithoutAuthoredInput
  upsert: VinylUpsertWithoutAuthoredInput
}

input VinylUpdateOneRequiredWithoutCreditsNestedInput {
  connect: VinylWhereUniqueInput
  connectOrCreate: VinylCreateOrConnectWithoutCreditsInput
  create: VinylCreateWithoutCreditsInput
  update: VinylUpdateToOneWithWhereWithoutCreditsInput
  upsert: VinylUpsertWithoutCreditsInput
}

input VinylUpdateOneRequiredWithoutImagesNestedInput {
  connect: VinylWhereUniqueInput
  connectOrCreate: VinylCreateOrConnectWithoutImagesInput
  create: VinylCreateWithoutImagesInput
  update: VinylUpdateToOneWithWhereWithoutImagesInput
  upsert: VinylUpsertWithoutImagesInput
}

input VinylUpdateOneRequiredWithoutPlayedByNestedInput {
  connect: VinylWhereUniqueInput
  connectOrCreate: VinylCreateOrConnectWithoutPlayedByInput
  create: VinylCreateWithoutPlayedByInput
  update: VinylUpdateToOneWithWhereWithoutPlayedByInput
  upsert: VinylUpsertWithoutPlayedByInput
}

input VinylUpdateOneRequiredWithoutTracksNestedInput {
  connect: VinylWhereUniqueInput
  connectOrCreate: VinylCreateOrConnectWithoutTracksInput
  create: VinylCreateWithoutTracksInput
  update: VinylUpdateToOneWithWhereWithoutTracksInput
  upsert: VinylUpsertWithoutTracksInput
}

input VinylUpdateToOneWithWhereWithoutAuthoredInput {
  data: VinylUpdateWithoutAuthoredInput!
  where: VinylWhereInput
}

input VinylUpdateToOneWithWhereWithoutCreditsInput {
  data: VinylUpdateWithoutCreditsInput!
  where: VinylWhereInput
}

input VinylUpdateToOneWithWhereWithoutImagesInput {
  data: VinylUpdateWithoutImagesInput!
  where: VinylWhereInput
}

input VinylUpdateToOneWithWhereWithoutPlayedByInput {
  data: VinylUpdateWithoutPlayedByInput!
  where: VinylWhereInput
}

input VinylUpdateToOneWithWhereWithoutTracksInput {
  data: VinylUpdateWithoutTracksInput!
  where: VinylWhereInput
}

input VinylUpdateWithWhereUniqueWithoutAlbumInput {
  data: VinylUpdateWithoutAlbumInput!
  where: VinylWhereUniqueInput!
}

input VinylUpdateWithWhereUniqueWithoutBoughtInput {
  data: VinylUpdateWithoutBoughtInput!
  where: VinylWhereUniqueInput!
}

input VinylUpdateWithWhereUniqueWithoutLabelInput {
  data: VinylUpdateWithoutLabelInput!
  where: VinylWhereUniqueInput!
}

input VinylUpdateWithWhereUniqueWithoutPocketStateInput {
  data: VinylUpdateWithoutPocketStateInput!
  where: VinylWhereUniqueInput!
}

input VinylUpdateWithWhereUniqueWithoutReadSpeedInput {
  data: VinylUpdateWithoutReadSpeedInput!
  where: VinylWhereUniqueInput!
}

input VinylUpdateWithWhereUniqueWithoutStateInput {
  data: VinylUpdateWithoutStateInput!
  where: VinylWhereUniqueInput!
}

input VinylUpdateWithoutAlbumInput {
  authored: AuthoredUpdateManyWithoutVinylNestedInput
  bought: BoughtUpdateOneWithoutVinylsNestedInput
  catNumber: StringFieldUpdateOperationsInput
  credits: CreditUpdateManyWithoutVinylNestedInput
  dateCreated: DateTimeFieldUpdateOperationsInput
  dateEdited: NullableDateTimeFieldUpdateOperationsInput
  dateReleased: NullableDateTimeFieldUpdateOperationsInput
  edition: NullableStringFieldUpdateOperationsInput
  idVinyl: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutVinylNestedInput
  label: LabelUpdateOneWithoutVinylsNestedInput
  notePocket: NullableStringFieldUpdateOperationsInput
  notes: NullableStringFieldUpdateOperationsInput
  playedBy: PlayedByUpdateManyWithoutVinylNestedInput
  pocketState: PocketStateUpdateOneWithoutVinylsNestedInput
  pressingLoc: NullableStringFieldUpdateOperationsInput
  rank: NullableIntFieldUpdateOperationsInput
  readSpeed: ReadSpeedUpdateOneRequiredWithoutVinylsNestedInput
  state: StateUpdateOneWithoutVinylsNestedInput
  tracks: TrackUpdateManyWithoutVinylNestedInput
  weight: NullableIntFieldUpdateOperationsInput
}

input VinylUpdateWithoutAuthoredInput {
  album: AlbumUpdateOneWithoutVinylsNestedInput
  bought: BoughtUpdateOneWithoutVinylsNestedInput
  catNumber: StringFieldUpdateOperationsInput
  credits: CreditUpdateManyWithoutVinylNestedInput
  dateCreated: DateTimeFieldUpdateOperationsInput
  dateEdited: NullableDateTimeFieldUpdateOperationsInput
  dateReleased: NullableDateTimeFieldUpdateOperationsInput
  edition: NullableStringFieldUpdateOperationsInput
  idVinyl: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutVinylNestedInput
  label: LabelUpdateOneWithoutVinylsNestedInput
  notePocket: NullableStringFieldUpdateOperationsInput
  notes: NullableStringFieldUpdateOperationsInput
  playedBy: PlayedByUpdateManyWithoutVinylNestedInput
  pocketState: PocketStateUpdateOneWithoutVinylsNestedInput
  pressingLoc: NullableStringFieldUpdateOperationsInput
  rank: NullableIntFieldUpdateOperationsInput
  readSpeed: ReadSpeedUpdateOneRequiredWithoutVinylsNestedInput
  state: StateUpdateOneWithoutVinylsNestedInput
  tracks: TrackUpdateManyWithoutVinylNestedInput
  weight: NullableIntFieldUpdateOperationsInput
}

input VinylUpdateWithoutBoughtInput {
  album: AlbumUpdateOneWithoutVinylsNestedInput
  authored: AuthoredUpdateManyWithoutVinylNestedInput
  catNumber: StringFieldUpdateOperationsInput
  credits: CreditUpdateManyWithoutVinylNestedInput
  dateCreated: DateTimeFieldUpdateOperationsInput
  dateEdited: NullableDateTimeFieldUpdateOperationsInput
  dateReleased: NullableDateTimeFieldUpdateOperationsInput
  edition: NullableStringFieldUpdateOperationsInput
  idVinyl: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutVinylNestedInput
  label: LabelUpdateOneWithoutVinylsNestedInput
  notePocket: NullableStringFieldUpdateOperationsInput
  notes: NullableStringFieldUpdateOperationsInput
  playedBy: PlayedByUpdateManyWithoutVinylNestedInput
  pocketState: PocketStateUpdateOneWithoutVinylsNestedInput
  pressingLoc: NullableStringFieldUpdateOperationsInput
  rank: NullableIntFieldUpdateOperationsInput
  readSpeed: ReadSpeedUpdateOneRequiredWithoutVinylsNestedInput
  state: StateUpdateOneWithoutVinylsNestedInput
  tracks: TrackUpdateManyWithoutVinylNestedInput
  weight: NullableIntFieldUpdateOperationsInput
}

input VinylUpdateWithoutCreditsInput {
  album: AlbumUpdateOneWithoutVinylsNestedInput
  authored: AuthoredUpdateManyWithoutVinylNestedInput
  bought: BoughtUpdateOneWithoutVinylsNestedInput
  catNumber: StringFieldUpdateOperationsInput
  dateCreated: DateTimeFieldUpdateOperationsInput
  dateEdited: NullableDateTimeFieldUpdateOperationsInput
  dateReleased: NullableDateTimeFieldUpdateOperationsInput
  edition: NullableStringFieldUpdateOperationsInput
  idVinyl: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutVinylNestedInput
  label: LabelUpdateOneWithoutVinylsNestedInput
  notePocket: NullableStringFieldUpdateOperationsInput
  notes: NullableStringFieldUpdateOperationsInput
  playedBy: PlayedByUpdateManyWithoutVinylNestedInput
  pocketState: PocketStateUpdateOneWithoutVinylsNestedInput
  pressingLoc: NullableStringFieldUpdateOperationsInput
  rank: NullableIntFieldUpdateOperationsInput
  readSpeed: ReadSpeedUpdateOneRequiredWithoutVinylsNestedInput
  state: StateUpdateOneWithoutVinylsNestedInput
  tracks: TrackUpdateManyWithoutVinylNestedInput
  weight: NullableIntFieldUpdateOperationsInput
}

input VinylUpdateWithoutImagesInput {
  album: AlbumUpdateOneWithoutVinylsNestedInput
  authored: AuthoredUpdateManyWithoutVinylNestedInput
  bought: BoughtUpdateOneWithoutVinylsNestedInput
  catNumber: StringFieldUpdateOperationsInput
  credits: CreditUpdateManyWithoutVinylNestedInput
  dateCreated: DateTimeFieldUpdateOperationsInput
  dateEdited: NullableDateTimeFieldUpdateOperationsInput
  dateReleased: NullableDateTimeFieldUpdateOperationsInput
  edition: NullableStringFieldUpdateOperationsInput
  idVinyl: StringFieldUpdateOperationsInput
  label: LabelUpdateOneWithoutVinylsNestedInput
  notePocket: NullableStringFieldUpdateOperationsInput
  notes: NullableStringFieldUpdateOperationsInput
  playedBy: PlayedByUpdateManyWithoutVinylNestedInput
  pocketState: PocketStateUpdateOneWithoutVinylsNestedInput
  pressingLoc: NullableStringFieldUpdateOperationsInput
  rank: NullableIntFieldUpdateOperationsInput
  readSpeed: ReadSpeedUpdateOneRequiredWithoutVinylsNestedInput
  state: StateUpdateOneWithoutVinylsNestedInput
  tracks: TrackUpdateManyWithoutVinylNestedInput
  weight: NullableIntFieldUpdateOperationsInput
}

input VinylUpdateWithoutLabelInput {
  album: AlbumUpdateOneWithoutVinylsNestedInput
  authored: AuthoredUpdateManyWithoutVinylNestedInput
  bought: BoughtUpdateOneWithoutVinylsNestedInput
  catNumber: StringFieldUpdateOperationsInput
  credits: CreditUpdateManyWithoutVinylNestedInput
  dateCreated: DateTimeFieldUpdateOperationsInput
  dateEdited: NullableDateTimeFieldUpdateOperationsInput
  dateReleased: NullableDateTimeFieldUpdateOperationsInput
  edition: NullableStringFieldUpdateOperationsInput
  idVinyl: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutVinylNestedInput
  notePocket: NullableStringFieldUpdateOperationsInput
  notes: NullableStringFieldUpdateOperationsInput
  playedBy: PlayedByUpdateManyWithoutVinylNestedInput
  pocketState: PocketStateUpdateOneWithoutVinylsNestedInput
  pressingLoc: NullableStringFieldUpdateOperationsInput
  rank: NullableIntFieldUpdateOperationsInput
  readSpeed: ReadSpeedUpdateOneRequiredWithoutVinylsNestedInput
  state: StateUpdateOneWithoutVinylsNestedInput
  tracks: TrackUpdateManyWithoutVinylNestedInput
  weight: NullableIntFieldUpdateOperationsInput
}

input VinylUpdateWithoutPlayedByInput {
  album: AlbumUpdateOneWithoutVinylsNestedInput
  authored: AuthoredUpdateManyWithoutVinylNestedInput
  bought: BoughtUpdateOneWithoutVinylsNestedInput
  catNumber: StringFieldUpdateOperationsInput
  credits: CreditUpdateManyWithoutVinylNestedInput
  dateCreated: DateTimeFieldUpdateOperationsInput
  dateEdited: NullableDateTimeFieldUpdateOperationsInput
  dateReleased: NullableDateTimeFieldUpdateOperationsInput
  edition: NullableStringFieldUpdateOperationsInput
  idVinyl: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutVinylNestedInput
  label: LabelUpdateOneWithoutVinylsNestedInput
  notePocket: NullableStringFieldUpdateOperationsInput
  notes: NullableStringFieldUpdateOperationsInput
  pocketState: PocketStateUpdateOneWithoutVinylsNestedInput
  pressingLoc: NullableStringFieldUpdateOperationsInput
  rank: NullableIntFieldUpdateOperationsInput
  readSpeed: ReadSpeedUpdateOneRequiredWithoutVinylsNestedInput
  state: StateUpdateOneWithoutVinylsNestedInput
  tracks: TrackUpdateManyWithoutVinylNestedInput
  weight: NullableIntFieldUpdateOperationsInput
}

input VinylUpdateWithoutPocketStateInput {
  album: AlbumUpdateOneWithoutVinylsNestedInput
  authored: AuthoredUpdateManyWithoutVinylNestedInput
  bought: BoughtUpdateOneWithoutVinylsNestedInput
  catNumber: StringFieldUpdateOperationsInput
  credits: CreditUpdateManyWithoutVinylNestedInput
  dateCreated: DateTimeFieldUpdateOperationsInput
  dateEdited: NullableDateTimeFieldUpdateOperationsInput
  dateReleased: NullableDateTimeFieldUpdateOperationsInput
  edition: NullableStringFieldUpdateOperationsInput
  idVinyl: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutVinylNestedInput
  label: LabelUpdateOneWithoutVinylsNestedInput
  notePocket: NullableStringFieldUpdateOperationsInput
  notes: NullableStringFieldUpdateOperationsInput
  playedBy: PlayedByUpdateManyWithoutVinylNestedInput
  pressingLoc: NullableStringFieldUpdateOperationsInput
  rank: NullableIntFieldUpdateOperationsInput
  readSpeed: ReadSpeedUpdateOneRequiredWithoutVinylsNestedInput
  state: StateUpdateOneWithoutVinylsNestedInput
  tracks: TrackUpdateManyWithoutVinylNestedInput
  weight: NullableIntFieldUpdateOperationsInput
}

input VinylUpdateWithoutReadSpeedInput {
  album: AlbumUpdateOneWithoutVinylsNestedInput
  authored: AuthoredUpdateManyWithoutVinylNestedInput
  bought: BoughtUpdateOneWithoutVinylsNestedInput
  catNumber: StringFieldUpdateOperationsInput
  credits: CreditUpdateManyWithoutVinylNestedInput
  dateCreated: DateTimeFieldUpdateOperationsInput
  dateEdited: NullableDateTimeFieldUpdateOperationsInput
  dateReleased: NullableDateTimeFieldUpdateOperationsInput
  edition: NullableStringFieldUpdateOperationsInput
  idVinyl: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutVinylNestedInput
  label: LabelUpdateOneWithoutVinylsNestedInput
  notePocket: NullableStringFieldUpdateOperationsInput
  notes: NullableStringFieldUpdateOperationsInput
  playedBy: PlayedByUpdateManyWithoutVinylNestedInput
  pocketState: PocketStateUpdateOneWithoutVinylsNestedInput
  pressingLoc: NullableStringFieldUpdateOperationsInput
  rank: NullableIntFieldUpdateOperationsInput
  state: StateUpdateOneWithoutVinylsNestedInput
  tracks: TrackUpdateManyWithoutVinylNestedInput
  weight: NullableIntFieldUpdateOperationsInput
}

input VinylUpdateWithoutStateInput {
  album: AlbumUpdateOneWithoutVinylsNestedInput
  authored: AuthoredUpdateManyWithoutVinylNestedInput
  bought: BoughtUpdateOneWithoutVinylsNestedInput
  catNumber: StringFieldUpdateOperationsInput
  credits: CreditUpdateManyWithoutVinylNestedInput
  dateCreated: DateTimeFieldUpdateOperationsInput
  dateEdited: NullableDateTimeFieldUpdateOperationsInput
  dateReleased: NullableDateTimeFieldUpdateOperationsInput
  edition: NullableStringFieldUpdateOperationsInput
  idVinyl: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutVinylNestedInput
  label: LabelUpdateOneWithoutVinylsNestedInput
  notePocket: NullableStringFieldUpdateOperationsInput
  notes: NullableStringFieldUpdateOperationsInput
  playedBy: PlayedByUpdateManyWithoutVinylNestedInput
  pocketState: PocketStateUpdateOneWithoutVinylsNestedInput
  pressingLoc: NullableStringFieldUpdateOperationsInput
  rank: NullableIntFieldUpdateOperationsInput
  readSpeed: ReadSpeedUpdateOneRequiredWithoutVinylsNestedInput
  tracks: TrackUpdateManyWithoutVinylNestedInput
  weight: NullableIntFieldUpdateOperationsInput
}

input VinylUpdateWithoutTracksInput {
  album: AlbumUpdateOneWithoutVinylsNestedInput
  authored: AuthoredUpdateManyWithoutVinylNestedInput
  bought: BoughtUpdateOneWithoutVinylsNestedInput
  catNumber: StringFieldUpdateOperationsInput
  credits: CreditUpdateManyWithoutVinylNestedInput
  dateCreated: DateTimeFieldUpdateOperationsInput
  dateEdited: NullableDateTimeFieldUpdateOperationsInput
  dateReleased: NullableDateTimeFieldUpdateOperationsInput
  edition: NullableStringFieldUpdateOperationsInput
  idVinyl: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutVinylNestedInput
  label: LabelUpdateOneWithoutVinylsNestedInput
  notePocket: NullableStringFieldUpdateOperationsInput
  notes: NullableStringFieldUpdateOperationsInput
  playedBy: PlayedByUpdateManyWithoutVinylNestedInput
  pocketState: PocketStateUpdateOneWithoutVinylsNestedInput
  pressingLoc: NullableStringFieldUpdateOperationsInput
  rank: NullableIntFieldUpdateOperationsInput
  readSpeed: ReadSpeedUpdateOneRequiredWithoutVinylsNestedInput
  state: StateUpdateOneWithoutVinylsNestedInput
  weight: NullableIntFieldUpdateOperationsInput
}

input VinylUpsertWithWhereUniqueWithoutAlbumInput {
  create: VinylCreateWithoutAlbumInput!
  update: VinylUpdateWithoutAlbumInput!
  where: VinylWhereUniqueInput!
}

input VinylUpsertWithWhereUniqueWithoutBoughtInput {
  create: VinylCreateWithoutBoughtInput!
  update: VinylUpdateWithoutBoughtInput!
  where: VinylWhereUniqueInput!
}

input VinylUpsertWithWhereUniqueWithoutLabelInput {
  create: VinylCreateWithoutLabelInput!
  update: VinylUpdateWithoutLabelInput!
  where: VinylWhereUniqueInput!
}

input VinylUpsertWithWhereUniqueWithoutPocketStateInput {
  create: VinylCreateWithoutPocketStateInput!
  update: VinylUpdateWithoutPocketStateInput!
  where: VinylWhereUniqueInput!
}

input VinylUpsertWithWhereUniqueWithoutReadSpeedInput {
  create: VinylCreateWithoutReadSpeedInput!
  update: VinylUpdateWithoutReadSpeedInput!
  where: VinylWhereUniqueInput!
}

input VinylUpsertWithWhereUniqueWithoutStateInput {
  create: VinylCreateWithoutStateInput!
  update: VinylUpdateWithoutStateInput!
  where: VinylWhereUniqueInput!
}

input VinylUpsertWithoutAuthoredInput {
  create: VinylCreateWithoutAuthoredInput!
  update: VinylUpdateWithoutAuthoredInput!
  where: VinylWhereInput
}

input VinylUpsertWithoutCreditsInput {
  create: VinylCreateWithoutCreditsInput!
  update: VinylUpdateWithoutCreditsInput!
  where: VinylWhereInput
}

input VinylUpsertWithoutImagesInput {
  create: VinylCreateWithoutImagesInput!
  update: VinylUpdateWithoutImagesInput!
  where: VinylWhereInput
}

input VinylUpsertWithoutPlayedByInput {
  create: VinylCreateWithoutPlayedByInput!
  update: VinylUpdateWithoutPlayedByInput!
  where: VinylWhereInput
}

input VinylUpsertWithoutTracksInput {
  create: VinylCreateWithoutTracksInput!
  update: VinylUpdateWithoutTracksInput!
  where: VinylWhereInput
}

input VinylWhereInput {
  AND: [VinylWhereInput!]
  NOT: [VinylWhereInput!]
  OR: [VinylWhereInput!]
  album: AlbumNullableRelationFilter
  authored: AuthoredListRelationFilter
  bought: BoughtNullableRelationFilter
  catNumber: StringFilter
  credits: CreditListRelationFilter
  dateCreated: DateTimeFilter
  dateEdited: DateTimeNullableFilter
  dateReleased: DateTimeNullableFilter
  edition: StringNullableFilter
  idAlbum: StringNullableFilter
  idBought: StringNullableFilter
  idLabel: StringNullableFilter
  idPocketState: StringNullableFilter
  idReadSpeed: StringFilter
  idState: StringNullableFilter
  idVinyl: StringFilter
  images: ImageListRelationFilter
  label: LabelNullableRelationFilter
  notePocket: StringNullableFilter
  notes: StringNullableFilter
  playedBy: PlayedByListRelationFilter
  pocketState: PocketStateNullableRelationFilter
  pressingLoc: StringNullableFilter
  rank: IntNullableFilter
  readSpeed: ReadSpeedRelationFilter
  state: StateNullableRelationFilter
  tracks: TrackListRelationFilter
  weight: IntNullableFilter
}

input VinylWhereUniqueInput {
  AND: [VinylWhereInput!]
  NOT: [VinylWhereInput!]
  OR: [VinylWhereInput!]
  album: AlbumNullableRelationFilter
  authored: AuthoredListRelationFilter
  bought: BoughtNullableRelationFilter
  catNumber: StringFilter
  credits: CreditListRelationFilter
  dateCreated: DateTimeFilter
  dateEdited: DateTimeNullableFilter
  dateReleased: DateTimeNullableFilter
  edition: StringNullableFilter
  idAlbum: StringNullableFilter
  idBought: StringNullableFilter
  idLabel: StringNullableFilter
  idPocketState: StringNullableFilter
  idReadSpeed: StringFilter
  idState: StringNullableFilter
  idVinyl: String
  images: ImageListRelationFilter
  label: LabelNullableRelationFilter
  notePocket: StringNullableFilter
  notes: StringNullableFilter
  playedBy: PlayedByListRelationFilter
  pocketState: PocketStateNullableRelationFilter
  pressingLoc: StringNullableFilter
  rank: IntNullableFilter
  readSpeed: ReadSpeedRelationFilter
  state: StateNullableRelationFilter
  tracks: TrackListRelationFilter
  weight: IntNullableFilter
}
